angular.module("app",["ngRoute","ui.router","tc.chartjs"]),angular.module("app").config(["$stateProvider","$urlRouterProvider","$locationProvider",function(e,t,n){t.otherwise("/"),e.state("app",{url:"/",views:{header:{templateUrl:"/nav.html"},content:{templateUrl:"/home.html",controller:"homeCtrl"}}}).state("app.home",{url:"home",views:{"content@":{templateUrl:"users/home.html",controller:"homeCtrl"}}}),n.html5Mode(!0)}]),angular.module("app").controller("homeCtrl",["$scope","$http","dataMutator",function(e,t,n){e.setup=function(){n.getData().then(function(t){n.csvToJSON(t.data,function(t){n.getCareerStats(t,function(t){e.stats=t})})},function(e){console.error(e)})},e.setup()}]),angular.module("app").controller("masterCtrl",function(){console.info("masterCtrl")}),angular.module("app").directive("careerStats",function(){return{restrict:"E",scope:{stats:"=item"},templateUrl:"partials/careerStats.html"}}),angular.module("app").directive("centuryStats",function(){return{restrict:"E",scope:{centuryStats:"=item"},templateUrl:"partials/centuryStats.html",controller:"centuryStatsCtrl"}}),angular.module("app").directive("drawConclusion",function(){return{restrict:"E",templateUrl:"partials/drawConclusion.html"}}),angular.module("app").directive("legends",function(){return{restrict:"EA",scope:{description:"@",color:"@"},templateUrl:"partials/legends.html"}}),angular.module("app").directive("personalInfo",function(){return{restrict:"E",templateUrl:"partials/personalInfo.html"}}),angular.module("app").directive("runsStats",function(){return{restrict:"E",scope:{runsStats:"=item"},templateUrl:"partials/runsStats.html",controller:"runsStatsCtrl"}}),angular.module("app").service("dataMutator",["$http",function(e){function t(){return e.get("/data/sachin.csv")}function n(e,t){for(var n=e.split("\n"),a=[],r=n[0].split(","),i=1;i<n.length-1;i++){for(var o={},s=n[i].split(","),l=0;l<r.length;l++)o[r[l]]=s[l];a.push(o)}return t&&"function"==typeof t?t(a):a}function a(e,t){var n=e.length,a=0,r=[],i=[],o=[],s=0,l=0,u=0,c=0,p=0,g=0,h=0;angular.forEach(e,function(e){var t={},n={},d={};e.batting_score.indexOf("*")>-1&&("1st"==e.batting_innings?g++:h++,e.batting_score=e.batting_score.replace("*",""),s++),isNaN(e.batting_score)?l++:(e.batting_score=parseInt(e.batting_score),t.runs=e.batting_score,t.against=e.opposition,t.result=e.match_result,t.innings=e.batting_innings,t.year=new Date(Date.parse(e.date)).getFullYear(),o.push(t),e.batting_score>=50&&e.batting_score<100?(d.runs=e.batting_score,d.against=e.opposition,d.result=e.match_result,d.innings=e.batting_innings,d.year=new Date(Date.parse(e.date)).getFullYear(),i.push(d)):e.batting_score>=100&&(n.runs=e.batting_score,n.against=e.opposition,n.result=e.match_result,n.innings=e.batting_innings,n.year=new Date(Date.parse(e.date)).getFullYear(),r.push(n)),a+=e.batting_score),!isNaN(e.wickets)&&parseInt(e.wickets)>0&&(e.wickets=parseInt(e.wickets),u+=e.wickets),!isNaN(e.catches)&&parseInt(e.catches)>0&&(e.catches=parseInt(e.catches),p+=e.catches),isNaN(e.runs_conceded)||(e.runs_conceded=parseInt(e.runs_conceded),c+=e.runs_conceded)});var d=n-l,f={totalMatches:n,totalRuns:a,halfCenturiesScored:i.length,centuriesScored:r.length,highestScore:Math.max.apply(null,r.map(function(e){return e.runs})),notOuts:s,totalInnings:d,battingAverage:(a/(d-s)).toFixed(2),wicketsTaken:u,runsConceded:c,bowlingAverage:(c/u).toFixed(2),catches:p,allCenturies:{centuriesScored:r,halfCenturiesScored:i},allInnings:{allInnings:o,firstInningsNotouts:g,secondInningsNotouts:h}};return t&&"function"==typeof t?t(f):f}return{getData:t,csvToJSON:n,getCareerStats:a}}]),angular.module("app").controller("centuryStatsCtrl",["$scope",function(e){e.$watch(function(){return e.centuryStats},function(t){t&&e.analyzeCenturies(e.centuryStats)}),e.analyzeCenturies=function(t){var n=_.pluck(t.centuriesScored,"runs"),a=_.pluck(t.centuriesScored,"against"),r=t.halfCenturiesScored.length,i=t.centuriesScored.length,o=[];t.centuriesScored.map(function(e,t){return"won"==e.result?o[t]="#0084FF":"lost"==e.result?o[t]="#ED3F2F":"tied"==e.result?o[t]="#DFF8EB":o[t]="#DDB967",o});var s=_.filter(t.centuriesScored,function(e){return"won"==e.result}),l=_.filter(t.centuriesScored,function(e){return"2nd"==e.innings}),u=_.filter(l,function(e){return"won"==e.result}),c=_.filter(l,function(e){return"lost"===e.result}),p=_.filter(l,function(e){return"tied"===e.result}),g=_.filter(l,function(e){return"n/r"===e.result}),h=[];t.centuriesScored.map(function(e){var t=e.against,n={score:e.runs};return"undefined"==typeof h[t]&&(h[t]=[]),h[t].push(n)});var d=[];t.centuriesScored.map(function(e){var t=e.year,n={score:e.runs};return"undefined"==typeof d[t]&&(d[t]=[]),d[t].push(n)});var f=[];t.halfCenturiesScored.map(function(e){var t=e.year,n={score:e.runs};return"undefined"==typeof f[t]&&(f[t]=[]),f[t].push(n)}),e.winningRatio=10*(s.length/t.centuriesScored.length).toFixed(2),e.prepareBarGraph(n,a,o),e.prepareBarGraphAgainstTeam(h),e.prepareLineGraph(d,f),e.prepareDoughnutChart(u.length,c.length,p.length,g.length),e.prepareConversionRatePieChart(r,i)},e.prepareBarGraph=function(t,n,a){e.bardata={labels:n,datasets:[{label:"Centuries",fillColor:a,strokeColor:"rgba(220,220,220,1)",pointColor:"rgba(220,220,220,1)",pointStrokeColor:"#fff",pointHighlightFill:"#fff",pointHighlightStroke:"rgba(220,220,220,1)",data:t}]},e.baroptions={responsive:!0,scaleBeginAtZero:!0,scaleShowGridLines:!0,scaleGridLineColor:"rgba(0,0,0,.05)",scaleGridLineWidth:1,barShowStroke:!0,barStrokeWidth:2,barValueSpacing:5,barDatasetSpacing:1,legendTemplate:'<ul class="tc-chart-js-legend"><% for (var i=0; i<datasets.length; i++){%><li><span style="background-color:<%=datasets[i].fillColor%>"></span><%if(datasets[i].label){%><%=datasets[i].label%><%}%></li><%}%></ul>'}},e.prepareBarGraphAgainstTeam=function(t){var n=[],a=[];for(var r in t)t.hasOwnProperty(r)&&(n.push(r),a.push(t[r].length));e.bardataAgainstTeam={labels:n,datasets:[{label:"Centuries",fillColor:["#0084FF"],strokeColor:"rgba(220,220,220,1)",pointColor:"rgba(220,220,220,1)",pointStrokeColor:"#fff",pointHighlightFill:"#fff",pointHighlightStroke:"rgba(220,220,220,1)",data:a}]},e.baroptionsAgainstTeam={responsive:!0,scaleBeginAtZero:!0,scaleShowGridLines:!0,scaleGridLineColor:"rgba(0,0,0,.05)",scaleGridLineWidth:1,barShowStroke:!0,barStrokeWidth:2,barValueSpacing:5,barDatasetSpacing:1,legendTemplate:'<ul class="tc-chart-js-legend"><% for (var i=0; i<datasets.length; i++){%><li><span style="background-color:<%=datasets[i].fillColor%>"></span><%if(datasets[i].label){%><%=datasets[i].label%><%}%></li><%}%></ul>'}},e.prepareLineGraph=function(t,n){var a=[],r=[];for(var i in t)t.hasOwnProperty(i)&&(a.push(i),r.push(t[i].length));var o=[],s=[];for(var l in n)n.hasOwnProperty(l)&&(o.push(l),s.push(n[l].length));var u=_.filter(a,function(e){return o.indexOf(e)<0}),c=_.filter(o,function(e){return a.indexOf(e)<0}),p=_.union(a,o).sort(),g=u.map(function(e){return p.indexOf(e)}),h=c.map(function(e){return p.indexOf(e)});h.map(function(e){return r.splice(e,0,0)}),g.map(function(e){return s.splice(e,0,0)}),e.lineData={labels:p,datasets:[{label:"Half Centuries over the years",fillColor:["rgba(0,132,255,0.4)"],strokeColor:"rgba(0,132,255,0.4)",pointColor:"rgba(0,132,255,0.4)",pointStrokeColor:"#fff",pointHighlightFill:"#fff",pointHighlightStroke:"rgba(220,220,220,1)",data:s},{label:"Centuries",fillColor:["rgba(220,220,220,0.6)"],strokeColor:"rgba(220,220,220,0.6)",pointColor:"rgba(220,220,220,0.6)",pointStrokeColor:"#fff",pointHighlightFill:"#fff",pointHighlightStroke:"rgba(220,220,220,1)",data:r}]},e.lineOptions={responsive:!0,scaleShowGridLines:!0,scaleGridLineColor:"rgba(0,0,0,.05)",scaleGridLineWidth:1,bezierCurve:!0,bezierCurveTension:.4,pointDot:!0,pointDotRadius:4,pointDotStrokeWidth:1,pointHitDetectionRadius:20,datasetStroke:!0,datasetStrokeWidth:2,datasetFill:!0,onAnimationProgress:function(){},onAnimationComplete:function(){},legendTemplate:'<ul class="tc-chart-js-legend"><% for (var i=0; i<datasets.length; i++){%><li><span style="background-color:<%=datasets[i].strokeColor%>"></span><%if(datasets[i].label){%><%=datasets[i].label%><%}%></li><%}%></ul>'}},e.prepareDoughnutChart=function(t,n,a,r){e.resources=[{value:t,color:"#FFFF00",highlight:"#e5e500",label:"India Won"},{value:n,color:"#46BFBD",highlight:"#5AD3D1",label:"India Lost"},{value:a,color:"#F7464A",highlight:"#FF5A5E",label:"Match Tied"},{value:r,color:"#F7464A",highlight:"#EF5A5E",label:"No Result"}],e.options={responsive:!0,segmentShowStroke:!0,segmentStrokeColor:"#fff",segmentStrokeWidth:2,percentageInnerCutout:50,animationSteps:100,animationEasing:"easeOutBounce",animateRotate:!0,animateScale:!1,legendTemplate:'<ul class="tc-chart-js-legend"><% for (var i=0; i<segments.length; i++){%><li><span style="background-color:<%=segments[i].fillColor%>"></span><%if(segments[i].label){%><%=segments[i].label%><%}%></li><%}%></ul>'}},e.prepareConversionRatePieChart=function(t,n){e.conversionData=[{value:t,color:"#F7464A",highlight:"#FF5A5E",label:"Half Centuries"},{value:n,color:"#FDB45C",highlight:"#FFC870",label:"Centuries"}],e.conversionOptions={responsive:!0,segmentShowStroke:!0,segmentStrokeColor:"#fff",segmentStrokeWidth:2,percentageInnerCutout:0,animationSteps:100,animationEasing:"easeOutBounce",animateRotate:!0,animateScale:!1,legendTemplate:'<ul class="tc-chart-js-legend"><% for (var i=0; i<segments.length; i++){%><li><span style="background-color:<%=segments[i].fillColor%>"></span><%if(segments[i].label){%><%=segments[i].label%><%}%></li><%}%></ul>'}}}]),angular.module("app").controller("runsStatsCtrl",["$scope",function(e){e.$watch(function(){return e.runsStats},function(t){t&&e.analyzeInnings(e.runsStats)}),e.analyzeInnings=function(t){var n=[],a=[],r=0,i=0,o=0,s=0;t.allInnings.map(function(e){"1st"==e.innings?(r++,o+=e.runs):(i++,s+=e.runs);var t=e.year,l=e.against;return"undefined"==typeof n[t]&&(n[t]=[]),"number"==typeof n[t]?n[t]+=parseInt(e.runs):n[t]=parseInt(e.runs),"undefined"==typeof a[l]&&(a[l]=[]),"number"==typeof a[l]?a[l]+=parseInt(e.runs):a[l]=parseInt(e.runs)}),e.prepareRunsByYearGraph(n),e.prepareRunsByTeamGraph(a),e.prepareRunsByInningsGraph(o,s),e.prepareAverageByInningsGraph(o,r,t.firstInningsNotouts,s,i,t.secondInningsNotouts)},e.prepareRunsByYearGraph=function(t){var n=[],a=[];for(var r in t)t.hasOwnProperty(r)&&(n.push(r),a.push(t[r]));var i=[];a.map(function(e,t){return e>=1e3?i[t]="#FFFF00":i[t]="#0084FF"}),e.yearBardata={labels:n,datasets:[{label:"Runs Over the years",fillColor:i,strokeColor:"rgba(220,220,220,1)",pointColor:"rgba(220,220,220,1)",pointStrokeColor:"#fff",pointHighlightFill:"#fff",pointHighlightStroke:"rgba(220,220,220,1)",data:a}]},e.yearBaroptions={responsive:!0,scaleBeginAtZero:!0,scaleShowGridLines:!0,scaleGridLineColor:"rgba(0,0,0,.05)",scaleGridLineWidth:1,barShowStroke:!0,barStrokeWidth:2,barValueSpacing:5,barDatasetSpacing:1,legendTemplate:'<ul class="tc-chart-js-legend"><% for (var i=0; i<datasets.length; i++){%><li><span style="background-color:<%=datasets[i].fillColor%>"></span><%if(datasets[i].label){%><%=datasets[i].label%><%}%></li><%}%></ul>'}},e.prepareRunsByTeamGraph=function(t){var n=[],a=[];for(var r in t)t.hasOwnProperty(r)&&(n.push(r),a.push(t[r]));e.teamBardata={labels:n,datasets:[{label:"Runs Over the years",fillColor:["#0084FF"],strokeColor:"rgba(220,220,220,1)",pointColor:"rgba(220,220,220,1)",pointStrokeColor:"#fff",pointHighlightFill:"#fff",pointHighlightStroke:"rgba(220,220,220,1)",data:a}]},e.teamBaroptions={responsive:!0,scaleBeginAtZero:!0,scaleShowGridLines:!0,scaleGridLineColor:"rgba(0,0,0,.05)",scaleGridLineWidth:1,barShowStroke:!0,barStrokeWidth:2,barValueSpacing:5,barDatasetSpacing:1,legendTemplate:'<ul class="tc-chart-js-legend"><% for (var i=0; i<datasets.length; i++){%><li><span style="background-color:<%=datasets[i].fillColor%>"></span><%if(datasets[i].label){%><%=datasets[i].label%><%}%></li><%}%></ul>'}},e.prepareRunsByInningsGraph=function(t,n){e.inniningsRunsresources=[{value:t,color:"#FFFF00",highlight:"#e5e500",label:"First Innings"},{value:n,color:"#46BFBD",highlight:"#5AD3D1",label:"Second Innings"}],e.inniningsRunsoptions={responsive:!0,segmentShowStroke:!0,segmentStrokeColor:"#fff",segmentStrokeWidth:2,percentageInnerCutout:50,animationSteps:100,animationEasing:"easeOutBounce",animateRotate:!0,animateScale:!1,legendTemplate:'<ul class="tc-chart-js-legend"><% for (var i=0; i<segments.length; i++){%><li><span style="background-color:<%=segments[i].fillColor%>"></span><%if(segments[i].label){%><%=segments[i].label%><%}%></li><%}%></ul>'}},e.prepareAverageByInningsGraph=function(t,n,a,r,i,o){var s=t/(n-a),l=r/(i-o);e.averageData=[{value:s.toFixed(2),color:"#F7464A",highlight:"#FF5A5E",label:"Average in First Innings"},{value:l.toFixed(2),color:"#FDB45C",highlight:"#FFC870",label:"Average in Second Innings"}],e.averageOptions={responsive:!0,segmentShowStroke:!0,segmentStrokeColor:"#fff",segmentStrokeWidth:2,percentageInnerCutout:0,animationSteps:100,animationEasing:"easeOutBounce",animateRotate:!0,animateScale:!1,legendTemplate:'<ul class="tc-chart-js-legend"><% for (var i=0; i<segments.length; i++){%><li><span style="background-color:<%=segments[i].fillColor%>"></span><%if(segments[i].label){%><%=segments[i].label%><%}%></li><%}%></ul>'}}}]);
//# sourceMappingURL=data:application/json;base64,
