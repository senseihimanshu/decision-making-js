angular.module("app",["ngRoute","ui.router","tc.chartjs"]),angular.module("app").config(["$stateProvider","$urlRouterProvider","$locationProvider",function(e,t,n){t.otherwise("/"),e.state("app",{url:"/",views:{header:{templateUrl:"/nav.html"},content:{templateUrl:"/home.html",controller:"homeCtrl"}}}).state("app.home",{url:"home",views:{"content@":{templateUrl:"users/home.html",controller:"homeCtrl"}}}),n.html5Mode(!0)}]),angular.module("app").controller("homeCtrl",["$scope","$http","dataMutator",function(e,t,n){e.setup=function(){n.getData().then(function(t){n.csvToJSON(t.data,function(t){n.getCareerStats(t,function(t){e.stats=t})})},function(e){console.error(e)})},e.setup()}]),angular.module("app").controller("masterCtrl",function(){console.info("App Loaded")}),angular.module("app").directive("careerStats",function(){return{restrict:"E",scope:{stats:"=item"},templateUrl:"partials/careerStats.html"}}),angular.module("app").directive("centuryStats",function(){return{restrict:"E",scope:{centuryStats:"=item"},templateUrl:"partials/centuryStats.html",controller:"centuryStatsCtrl"}}),angular.module("app").directive("drawConclusion",function(){return{restrict:"E",templateUrl:"partials/drawConclusion.html"}}),angular.module("app").directive("legends",function(){return{restrict:"EA",scope:{description:"@",color:"@"},templateUrl:"partials/legends.html"}}),angular.module("app").directive("personalInfo",function(){return{restrict:"E",templateUrl:"partials/personalInfo.html"}}),angular.module("app").directive("runsStats",function(){return{restrict:"E",scope:{runsStats:"=item"},templateUrl:"partials/runsStats.html",controller:"runsStatsCtrl"}}),angular.module("app").service("dataMutator",["$http",function(e){function t(){return e.get("/data/sachin.csv")}function n(e,t){for(var n=e.split("\n"),r=[],a=n[0].split(","),o=1;o<n.length-1;o++){for(var i={},s=n[o].split(","),l=0;l<a.length;l++)i[a[l]]=s[l];r.push(i)}return t&&"function"==typeof t?t(r):r}function r(e,t){var n=e.length,r=0,a=[],o=[],i=[],s=0,l=0,u=0,c=0,p=0,g=0,h=0;angular.forEach(e,function(e){var t={},n={},f={};e.batting_score.indexOf("*")>-1&&("1st"==e.batting_innings?g++:h++,e.batting_score=e.batting_score.replace("*",""),s++),isNaN(e.batting_score)?l++:(e.batting_score=parseInt(e.batting_score),t.runs=e.batting_score,t.against=e.opposition,t.result=e.match_result,t.innings=e.batting_innings,t.year=new Date(Date.parse(e.date)).getFullYear(),i.push(t),e.batting_score>=50&&e.batting_score<100?(f.runs=e.batting_score,f.against=e.opposition,f.result=e.match_result,f.innings=e.batting_innings,f.year=new Date(Date.parse(e.date)).getFullYear(),o.push(f)):e.batting_score>=100&&(n.runs=e.batting_score,n.against=e.opposition,n.result=e.match_result,n.innings=e.batting_innings,n.year=new Date(Date.parse(e.date)).getFullYear(),a.push(n)),r+=e.batting_score),!isNaN(e.wickets)&&parseInt(e.wickets)>0&&(e.wickets=parseInt(e.wickets),u+=e.wickets),!isNaN(e.catches)&&parseInt(e.catches)>0&&(e.catches=parseInt(e.catches),p+=e.catches),isNaN(e.runs_conceded)||(e.runs_conceded=parseInt(e.runs_conceded),c+=e.runs_conceded)});var f=n-l,d={totalMatches:n,totalRuns:r,halfCenturiesScored:o.length,centuriesScored:a.length,highestScore:Math.max.apply(null,a.map(function(e){return e.runs})),notOuts:s,totalInnings:f,battingAverage:(r/(f-s)).toFixed(2),wicketsTaken:u,runsConceded:c,bowlingAverage:(c/u).toFixed(2),catches:p,allCenturies:{centuriesScored:a,halfCenturiesScored:o},allInnings:{allInnings:i,firstInningsNotouts:g,secondInningsNotouts:h}};return t&&"function"==typeof t?t(d):d}return{getData:t,csvToJSON:n,getCareerStats:r}}]),angular.module("app").controller("centuryStatsCtrl",["$scope",function(e){e.$watch(function(){return e.centuryStats},function(t){t&&e.analyzeCenturies(e.centuryStats)}),e.analyzeCenturies=function(t){var n=_.pluck(t.centuriesScored,"runs"),r=_.pluck(t.centuriesScored,"against"),a=t.halfCenturiesScored.length,o=t.centuriesScored.length,i=[];t.centuriesScored.map(function(e,t){return"won"==e.result?i[t]="#0084FF":"lost"==e.result?i[t]="#ED3F2F":"tied"==e.result?i[t]="#DFF8EB":i[t]="#DDB967",i});var s=_.filter(t.centuriesScored,function(e){return"won"==e.result}),l=_.filter(t.centuriesScored,function(e){return"2nd"==e.innings}),u=_.filter(l,function(e){return"won"==e.result}),c=_.filter(l,function(e){return"lost"===e.result}),p=_.filter(l,function(e){return"tied"===e.result}),g=_.filter(l,function(e){return"n/r"===e.result}),h=[];t.centuriesScored.map(function(e){var t=e.against,n={score:e.runs};return"undefined"==typeof h[t]&&(h[t]=[]),h[t].push(n)});var f=[];t.centuriesScored.map(function(e){var t=e.year,n={score:e.runs};return"undefined"==typeof f[t]&&(f[t]=[]),f[t].push(n)});var d=[];t.halfCenturiesScored.map(function(e){var t=e.year,n={score:e.runs};return"undefined"==typeof d[t]&&(d[t]=[]),d[t].push(n)}),e.winningRatio=10*(s.length/t.centuriesScored.length).toFixed(2),e.prepareBarGraph(n,r,i),e.prepareBarGraphAgainstTeam(h),e.prepareLineGraph(f,d),e.prepareDoughnutChart(u.length,c.length,p.length,g.length),e.prepareConversionRatePieChart(a,o)},e.prepareBarGraph=function(t,n,r){e.bardata={labels:n,datasets:[{label:"Centuries",fillColor:r,strokeColor:"rgba(220,220,220,1)",pointColor:"rgba(220,220,220,1)",pointStrokeColor:"#fff",pointHighlightFill:"#fff",pointHighlightStroke:"rgba(220,220,220,1)",data:t}]},e.baroptions={responsive:!0,scaleBeginAtZero:!0,scaleShowGridLines:!0,scaleGridLineColor:"rgba(0,0,0,.05)",scaleGridLineWidth:1,barShowStroke:!0,barStrokeWidth:2,barValueSpacing:5,barDatasetSpacing:1}},e.prepareBarGraphAgainstTeam=function(t){var n=[],r=[];for(var a in t)t.hasOwnProperty(a)&&(n.push(a),r.push(t[a].length));e.bardataAgainstTeam={labels:n,datasets:[{label:"Centuries",fillColor:["#0084FF"],strokeColor:"rgba(220,220,220,1)",pointColor:"rgba(220,220,220,1)",pointStrokeColor:"#fff",pointHighlightFill:"#fff",pointHighlightStroke:"rgba(220,220,220,1)",data:r}]},e.baroptionsAgainstTeam={responsive:!0,scaleBeginAtZero:!0,scaleShowGridLines:!0,scaleGridLineColor:"rgba(0,0,0,.05)",scaleGridLineWidth:1,barShowStroke:!0,barStrokeWidth:2,barValueSpacing:5,barDatasetSpacing:1}},e.prepareLineGraph=function(t,n){var r=[],a=[];for(var o in t)t.hasOwnProperty(o)&&(r.push(o),a.push(t[o].length));var i=[],s=[];for(var l in n)n.hasOwnProperty(l)&&(i.push(l),s.push(n[l].length));var u=_.filter(r,function(e){return i.indexOf(e)<0}),c=_.filter(i,function(e){return r.indexOf(e)<0}),p=_.union(r,i).sort(),g=u.map(function(e){return p.indexOf(e)}),h=c.map(function(e){return p.indexOf(e)});h.map(function(e){return a.splice(e,0,0)}),g.map(function(e){return s.splice(e,0,0)}),e.lineData={labels:p,datasets:[{label:"Half Centuries over the years",fillColor:["rgba(0,132,255,0.4)"],strokeColor:"rgba(0,132,255,0.4)",pointColor:"rgba(0,132,255,0.4)",pointStrokeColor:"#fff",pointHighlightFill:"#fff",pointHighlightStroke:"rgba(220,220,220,1)",data:s},{label:"Centuries",fillColor:["rgba(220,220,220,0.6)"],strokeColor:"rgba(220,220,220,0.6)",pointColor:"rgba(220,220,220,0.6)",pointStrokeColor:"#fff",pointHighlightFill:"#fff",pointHighlightStroke:"rgba(220,220,220,1)",data:a}]},e.lineOptions={responsive:!0,scaleShowGridLines:!0,scaleGridLineColor:"rgba(0,0,0,.05)",scaleGridLineWidth:1,bezierCurve:!0,bezierCurveTension:.4,pointDot:!0,pointDotRadius:4,pointDotStrokeWidth:1,pointHitDetectionRadius:20,datasetStroke:!0,datasetStrokeWidth:2,datasetFill:!0,onAnimationProgress:function(){},onAnimationComplete:function(){}}},e.prepareDoughnutChart=function(t,n,r,a){e.resources=[{value:t,color:"#FFFF00",highlight:"#e5e500",label:"India Won"},{value:n,color:"#46BFBD",highlight:"#5AD3D1",label:"India Lost"},{value:r,color:"#F7464A",highlight:"#FF5A5E",label:"Match Tied"},{value:a,color:"#F7464A",highlight:"#EF5A5E",label:"No Result"}],e.options={responsive:!0,segmentShowStroke:!0,segmentStrokeColor:"#fff",segmentStrokeWidth:2,percentageInnerCutout:50,animationSteps:100,animationEasing:"easeOutBounce",animateRotate:!0,animateScale:!1}},e.prepareConversionRatePieChart=function(t,n){e.conversionData=[{value:t,color:"#F7464A",highlight:"#FF5A5E",label:"Half Centuries"},{value:n,color:"#FDB45C",highlight:"#FFC870",label:"Centuries"}],e.conversionOptions={responsive:!0,segmentShowStroke:!0,segmentStrokeColor:"#fff",segmentStrokeWidth:2,percentageInnerCutout:0,animationSteps:100,animationEasing:"easeOutBounce",animateRotate:!0,animateScale:!1}}}]),angular.module("app").controller("runsStatsCtrl",["$scope",function(e){e.$watch(function(){return e.runsStats},function(t){t&&e.analyzeInnings(e.runsStats)}),e.analyzeInnings=function(t){var n=[],r=[],a=0,o=0,i=0,s=0;t.allInnings.map(function(e){"1st"==e.innings?(a++,i+=e.runs):(o++,s+=e.runs);var t=e.year,l=e.against;return"undefined"==typeof n[t]&&(n[t]=[]),"number"==typeof n[t]?n[t]+=parseInt(e.runs):n[t]=parseInt(e.runs),"undefined"==typeof r[l]&&(r[l]=[]),"number"==typeof r[l]?r[l]+=parseInt(e.runs):r[l]=parseInt(e.runs)}),e.prepareRunsByYearGraph(n),e.prepareRunsByTeamGraph(r),e.prepareRunsByInningsGraph(i,s),e.prepareAverageByInningsGraph(i,a,t.firstInningsNotouts,s,o,t.secondInningsNotouts)},e.prepareRunsByYearGraph=function(t){var n=[],r=[];for(var a in t)t.hasOwnProperty(a)&&(n.push(a),r.push(t[a]));var o=[];r.map(function(e,t){return e>=1e3?o[t]="#FFFF00":o[t]="#0084FF"}),e.yearBardata={labels:n,datasets:[{label:"Runs Over the years",fillColor:o,strokeColor:"rgba(220,220,220,1)",pointColor:"rgba(220,220,220,1)",pointStrokeColor:"#fff",pointHighlightFill:"#fff",pointHighlightStroke:"rgba(220,220,220,1)",data:r}]},e.yearBaroptions={responsive:!0,scaleBeginAtZero:!0,scaleShowGridLines:!0,scaleGridLineColor:"rgba(0,0,0,.05)",scaleGridLineWidth:1,barShowStroke:!0,barStrokeWidth:2,barValueSpacing:5,barDatasetSpacing:1}},e.prepareRunsByTeamGraph=function(t){var n=[],r=[];for(var a in t)t.hasOwnProperty(a)&&(n.push(a),r.push(t[a]));e.teamBardata={labels:n,datasets:[{label:"Runs Over the years",fillColor:["#0084FF"],strokeColor:"rgba(220,220,220,1)",pointColor:"rgba(220,220,220,1)",pointStrokeColor:"#fff",pointHighlightFill:"#fff",pointHighlightStroke:"rgba(220,220,220,1)",data:r}]},e.teamBaroptions={responsive:!0,scaleBeginAtZero:!0,scaleShowGridLines:!0,scaleGridLineColor:"rgba(0,0,0,.05)",scaleGridLineWidth:1,barShowStroke:!0,barStrokeWidth:2,barValueSpacing:5,barDatasetSpacing:1}},e.prepareRunsByInningsGraph=function(t,n){e.inniningsRunsresources=[{value:t,color:"#FFFF00",highlight:"#e5e500",label:"First Innings"},{value:n,color:"#46BFBD",highlight:"#5AD3D1",label:"Second Innings"}],e.inniningsRunsoptions={responsive:!0,segmentShowStroke:!0,segmentStrokeColor:"#fff",segmentStrokeWidth:2,percentageInnerCutout:50,animationSteps:100,animationEasing:"easeOutBounce",animateRotate:!0,animateScale:!1}},e.prepareAverageByInningsGraph=function(t,n,r,a,o,i){var s=t/(n-r),l=a/(o-i);e.averageData=[{value:s.toFixed(2),color:"#F7464A",highlight:"#FF5A5E",label:"Average in First Innings"},{value:l.toFixed(2),color:"#FDB45C",highlight:"#FFC870",label:"Average in Second Innings"}],e.averageOptions={responsive:!0,segmentShowStroke:!0,segmentStrokeColor:"#fff",segmentStrokeWidth:2,percentageInnerCutout:0,animationSteps:100,animationEasing:"easeOutBounce",animateRotate:!0,animateScale:!1}}}]);
//# sourceMappingURL=data:application/json;base64,
