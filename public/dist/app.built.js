angular.module("app",["ngRoute","ui.router","tc.chartjs"]),angular.module("app").config(["$stateProvider","$urlRouterProvider","$locationProvider",function(e,t,n){t.otherwise("/"),e.state("app",{url:"/",views:{header:{templateUrl:"/nav.html"},content:{templateUrl:"/home.html",controller:"homeCtrl"}}}).state("app.home",{url:"home",views:{"content@":{templateUrl:"users/home.html",controller:"homeCtrl"}}}),n.html5Mode(!0)}]),angular.module("app").controller("homeCtrl",["$scope","$http","dataMutator",function(e,t,n){e.setup=function(){n.getData().then(function(t){n.csvToJSON(t.data,function(t){n.getCareerStats(t,function(t){e.stats=t})})},function(e){console.error(e)})},e.setup()}]),angular.module("app").controller("masterCtrl",function(){console.info("App Loaded")}),angular.module("app").directive("careerStats",function(){return{restrict:"E",scope:{stats:"=item"},templateUrl:"partials/careerStats.html"}}),angular.module("app").directive("centuryStats",function(){return{restrict:"E",scope:{centuryStats:"=item"},templateUrl:"partials/centuryStats.html",controller:"centuryStatsCtrl"}}),angular.module("app").directive("drawConclusion",function(){return{restrict:"E",templateUrl:"partials/drawConclusion.html"}}),angular.module("app").directive("legends",function(){return{restrict:"EA",scope:{description:"@",color:"@"},templateUrl:"partials/legends.html"}}),angular.module("app").directive("personalInfo",function(){return{restrict:"E",templateUrl:"partials/personalInfo.html"}}),angular.module("app").directive("runsStats",function(){return{restrict:"E",scope:{runsStats:"=item"},templateUrl:"partials/runsStats.html",controller:"runsStatsCtrl"}}),angular.module("app").service("dataMutator",["$http",function(e){function t(){return e.get("/data/sachin.csv")}function n(e,t){for(var n=e.split("\n"),r=[],a=n[0].split(","),o=1;o<n.length-1;o++){for(var i={},s=n[o].split(","),l=0;l<a.length;l++)i[a[l]]=s[l];r.push(i)}return t&&"function"==typeof t?t(r):r}function r(e,t){var n=e.length,r=0,a=[],o=[],i=[],s=0,l=0,u=0,c=0,p=0,g=0,h=0;angular.forEach(e,function(e){var t={},n={},f={};e.batting_score.indexOf("*")>-1&&("1st"==e.batting_innings?g++:h++,e.batting_score=e.batting_score.replace("*",""),s++),isNaN(e.batting_score)?l++:(e.batting_score=parseInt(e.batting_score),t.runs=e.batting_score,t.against=e.opposition,t.result=e.match_result,t.innings=e.batting_innings,t.year=new Date(Date.parse(e.date)).getFullYear(),i.push(t),e.batting_score>=50&&e.batting_score<100?(f.runs=e.batting_score,f.against=e.opposition,f.result=e.match_result,f.innings=e.batting_innings,f.year=new Date(Date.parse(e.date)).getFullYear(),o.push(f)):e.batting_score>=100&&(n.runs=e.batting_score,n.against=e.opposition,n.result=e.match_result,n.innings=e.batting_innings,n.year=new Date(Date.parse(e.date)).getFullYear(),a.push(n)),r+=e.batting_score),!isNaN(e.wickets)&&parseInt(e.wickets)>0&&(e.wickets=parseInt(e.wickets),u+=e.wickets),!isNaN(e.catches)&&parseInt(e.catches)>0&&(e.catches=parseInt(e.catches),p+=e.catches),isNaN(e.runs_conceded)||(e.runs_conceded=parseInt(e.runs_conceded),c+=e.runs_conceded)});var f=n-l,d={totalMatches:n,totalRuns:r,halfCenturiesScored:o.length,centuriesScored:a.length,highestScore:Math.max.apply(null,a.map(function(e){return e.runs})),notOuts:s,totalInnings:f,battingAverage:(r/(f-s)).toFixed(2),wicketsTaken:u,runsConceded:c,bowlingAverage:(c/u).toFixed(2),catches:p,allCenturies:{centuriesScored:a,halfCenturiesScored:o},allInnings:{allInnings:i,firstInningsNotouts:g,secondInningsNotouts:h}};return t&&"function"==typeof t?t(d):d}return{getData:t,csvToJSON:n,getCareerStats:r}}]),angular.module("app").controller("centuryStatsCtrl",["$scope",function(e){e.$watch(function(){return e.centuryStats},function(t){t&&e.analyzeCenturies(e.centuryStats)}),e.analyzeCenturies=function(t){var n=_.pluck(t.centuriesScored,"runs"),r=_.pluck(t.centuriesScored,"against"),a=t.halfCenturiesScored.length,o=t.centuriesScored.length,i=[];t.centuriesScored.map(function(e,t){return"won"==e.result?i[t]="#0084FF":"lost"==e.result?i[t]="#ED3F2F":"tied"==e.result?i[t]="#DFF8EB":i[t]="#DDB967",i});var s=_.filter(t.centuriesScored,function(e){return"won"==e.result}),l=_.filter(t.centuriesScored,function(e){return"2nd"==e.innings}),u=_.filter(l,function(e){return"won"==e.result}),c=_.filter(l,function(e){return"lost"===e.result}),p=_.filter(l,function(e){return"tied"===e.result}),g=_.filter(l,function(e){return"n/r"===e.result}),h=[];t.centuriesScored.map(function(e){var t=e.against,n={score:e.runs};return"undefined"==typeof h[t]&&(h[t]=[]),h[t].push(n)});var f=[];t.centuriesScored.map(function(e){var t=e.year,n={score:e.runs};return"undefined"==typeof f[t]&&(f[t]=[]),f[t].push(n)});var d=[];t.halfCenturiesScored.map(function(e){var t=e.year,n={score:e.runs};return"undefined"==typeof d[t]&&(d[t]=[]),d[t].push(n)}),e.winningRatio=10*(s.length/t.centuriesScored.length).toFixed(2),e.prepareBarGraph(n,r,i),e.prepareBarGraphAgainstTeam(h),e.prepareLineGraph(f,d),e.prepareDoughnutChart(u.length,c.length,p.length,g.length),e.prepareConversionRatePieChart(a,o)},e.prepareBarGraph=function(t,n,r){e.bardata={labels:n,datasets:[{label:"Centuries",fillColor:r,strokeColor:"rgba(220,220,220,1)",pointColor:"rgba(220,220,220,1)",pointStrokeColor:"#fff",pointHighlightFill:"#fff",pointHighlightStroke:"rgba(220,220,220,1)",data:t}]},e.baroptions={responsive:!0,scaleBeginAtZero:!0,scaleShowGridLines:!0,scaleGridLineColor:"rgba(0,0,0,.05)",scaleGridLineWidth:1,barShowStroke:!0,barStrokeWidth:2,barValueSpacing:5,barDatasetSpacing:1}},e.prepareBarGraphAgainstTeam=function(t){var n=[],r=[];for(var a in t)t.hasOwnProperty(a)&&(n.push(a),r.push(t[a].length));e.bardataAgainstTeam={labels:n,datasets:[{label:"Centuries",fillColor:["#0084FF"],strokeColor:"rgba(220,220,220,1)",pointColor:"rgba(220,220,220,1)",pointStrokeColor:"#fff",pointHighlightFill:"#fff",pointHighlightStroke:"rgba(220,220,220,1)",data:r}]},e.baroptionsAgainstTeam={responsive:!0,scaleBeginAtZero:!0,scaleShowGridLines:!0,scaleGridLineColor:"rgba(0,0,0,.05)",scaleGridLineWidth:1,barShowStroke:!0,barStrokeWidth:2,barValueSpacing:5,barDatasetSpacing:1}},e.prepareLineGraph=function(t,n){var r=[],a=[];for(var o in t)t.hasOwnProperty(o)&&(r.push(o),a.push(t[o].length));var i=[],s=[];for(var l in n)n.hasOwnProperty(l)&&(i.push(l),s.push(n[l].length));var u=_.filter(r,function(e){return i.indexOf(e)<0}),c=_.filter(i,function(e){return r.indexOf(e)<0}),p=_.union(r,i).sort(),g=u.map(function(e){return p.indexOf(e)}),h=c.map(function(e){return p.indexOf(e)});h.map(function(e){return a.splice(e,0,0)}),g.map(function(e){return s.splice(e,0,0)}),e.lineData={labels:p,datasets:[{label:"Half Centuries over the years",fillColor:["rgba(0,132,255,0.4)"],strokeColor:"rgba(0,132,255,0.4)",pointColor:"rgba(0,132,255,0.4)",pointStrokeColor:"#fff",pointHighlightFill:"#fff",pointHighlightStroke:"rgba(220,220,220,1)",data:s},{label:"Centuries",fillColor:["rgba(220,220,220,0.6)"],strokeColor:"rgba(220,220,220,0.6)",pointColor:"rgba(220,220,220,0.6)",pointStrokeColor:"#fff",pointHighlightFill:"#fff",pointHighlightStroke:"rgba(220,220,220,1)",data:a}]},e.lineOptions={responsive:!0,scaleShowGridLines:!0,scaleGridLineColor:"rgba(0,0,0,.05)",scaleGridLineWidth:1,bezierCurve:!0,bezierCurveTension:.4,pointDot:!0,pointDotRadius:4,pointDotStrokeWidth:1,pointHitDetectionRadius:20,datasetStroke:!0,datasetStrokeWidth:2,datasetFill:!0,onAnimationProgress:function(){},onAnimationComplete:function(){}}},e.prepareDoughnutChart=function(t,n,r,a){e.resources=[{value:t,color:"#FFFF00",highlight:"#e5e500",label:"India Won"},{value:n,color:"#46BFBD",highlight:"#5AD3D1",label:"India Lost"},{value:r,color:"#F7464A",highlight:"#FF5A5E",label:"Match Tied"},{value:a,color:"#F7464A",highlight:"#EF5A5E",label:"No Result"}],e.options={responsive:!0,segmentShowStroke:!0,segmentStrokeColor:"#fff",segmentStrokeWidth:2,percentageInnerCutout:50,animationSteps:100,animationEasing:"easeOutBounce",animateRotate:!0,animateScale:!1}},e.prepareConversionRatePieChart=function(t,n){e.conversionData=[{value:t,color:"#F7464A",highlight:"#FF5A5E",label:"Half Centuries"},{value:n,color:"#FDB45C",highlight:"#FFC870",label:"Centuries"}],e.conversionOptions={responsive:!0,segmentShowStroke:!0,segmentStrokeColor:"#fff",segmentStrokeWidth:2,percentageInnerCutout:0,animationSteps:100,animationEasing:"easeOutBounce",animateRotate:!0,animateScale:!1}}}]),angular.module("app").controller("runsStatsCtrl",["$scope",function(e){e.$watch(function(){return e.runsStats},function(t){t&&e.analyzeInnings(e.runsStats)}),e.analyzeInnings=function(t){var n=[],r=[],a=0,o=0,i=0,s=0;t.allInnings.map(function(e){"1st"==e.innings?(a++,i+=e.runs):(o++,s+=e.runs);var t=e.year,l=e.against;return"undefined"==typeof n[t]&&(n[t]=[]),"number"==typeof n[t]?n[t]+=parseInt(e.runs):n[t]=parseInt(e.runs),"undefined"==typeof r[l]&&(r[l]=[]),"number"==typeof r[l]?r[l]+=parseInt(e.runs):r[l]=parseInt(e.runs)}),e.prepareRunsByYearGraph(n),e.prepareRunsByTeamGraph(r),e.prepareRunsByInningsGraph(i,s),e.prepareAverageByInningsGraph(i,a,t.firstInningsNotouts,s,o,t.secondInningsNotouts)},e.prepareRunsByYearGraph=function(t){var n=[],r=[];for(var a in t)t.hasOwnProperty(a)&&(n.push(a),r.push(t[a]));var o=[];r.map(function(e,t){return e>=1e3?o[t]="#FFFF00":o[t]="#0084FF"}),e.yearBardata={labels:n,datasets:[{label:"Runs Over the years",fillColor:o,strokeColor:"rgba(220,220,220,1)",pointColor:"rgba(220,220,220,1)",pointStrokeColor:"#fff",pointHighlightFill:"#fff",pointHighlightStroke:"rgba(220,220,220,1)",data:r}]},e.yearBaroptions={responsive:!0,scaleBeginAtZero:!0,scaleShowGridLines:!0,scaleGridLineColor:"rgba(0,0,0,.05)",scaleGridLineWidth:1,barShowStroke:!0,barStrokeWidth:2,barValueSpacing:5,barDatasetSpacing:1}},e.prepareRunsByTeamGraph=function(t){var n=[],r=[];for(var a in t)t.hasOwnProperty(a)&&(n.push(a),r.push(t[a]));e.teamBardata={labels:n,datasets:[{label:"Runs Over the years",fillColor:["#0084FF"],strokeColor:"rgba(220,220,220,1)",pointColor:"rgba(220,220,220,1)",pointStrokeColor:"#fff",pointHighlightFill:"#fff",pointHighlightStroke:"rgba(220,220,220,1)",data:r}]},e.teamBaroptions={responsive:!0,scaleBeginAtZero:!0,scaleShowGridLines:!0,scaleGridLineColor:"rgba(0,0,0,.05)",scaleGridLineWidth:1,barShowStroke:!0,barStrokeWidth:2,barValueSpacing:5,barDatasetSpacing:1}},e.prepareRunsByInningsGraph=function(t,n){e.inniningsRunsresources=[{value:t,color:"#FFFF00",highlight:"#e5e500",label:"First Innings"},{value:n,color:"#46BFBD",highlight:"#5AD3D1",label:"Second Innings"}],e.inniningsRunsoptions={responsive:!0,segmentShowStroke:!0,segmentStrokeColor:"#fff",segmentStrokeWidth:2,percentageInnerCutout:50,animationSteps:100,animationEasing:"easeOutBounce",animateRotate:!0,animateScale:!1}},e.prepareAverageByInningsGraph=function(t,n,r,a,o,i){var s=t/(n-r),l=a/(o-i);e.averageData=[{value:s.toFixed(2),color:"#F7464A",highlight:"#FF5A5E",label:"Average in First Innings"},{value:l.toFixed(2),color:"#FDB45C",highlight:"#FFC870",label:"Average in Second Innings"}],e.averageOptions={responsive:!0,segmentShowStroke:!0,segmentStrokeColor:"#fff",segmentStrokeWidth:2,percentageInnerCutout:0,animationSteps:100,animationEasing:"easeOutBounce",animateRotate:!0,animateScale:!1}}}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZS5qcyIsInJvdXRlcy5qcyIsImNvbnRyb2xsZXJzL2hvbWVDdHJsLmpzIiwiY29udHJvbGxlcnMvbWFzdGVyQ3RybC5qcyIsImRpcmVjdGl2ZXMvY2FyZWVyU3RhdHMuanMiLCJkaXJlY3RpdmVzL2NlbnR1cnlTdGF0cy5qcyIsImRpcmVjdGl2ZXMvZHJhd0NvbmNsdXNpb24uanMiLCJkaXJlY3RpdmVzL2xlZ2VuZHMuanMiLCJkaXJlY3RpdmVzL3BlcnNvbmFsSW5mby5qcyIsImRpcmVjdGl2ZXMvcnVuc1N0YXRzLmpzIiwic2VydmljZXMvZGF0YU11dGF0b3IuanMiLCJjb250cm9sbGVycy9wYXJ0aWFscy9jZW50dXJ5U3RhdHNDdHJsLmpzIiwiY29udHJvbGxlcnMvcGFydGlhbHMvcnVuc1N0YXRzQ3RybC5qcyJdLCJuYW1lcyI6WyJhbmd1bGFyIiwibW9kdWxlIiwiY29uZmlnIiwiJHN0YXRlUHJvdmlkZXIiLCIkdXJsUm91dGVyUHJvdmlkZXIiLCIkbG9jYXRpb25Qcm92aWRlciIsIm90aGVyd2lzZSIsInN0YXRlIiwidXJsIiwidmlld3MiLCJoZWFkZXIiLCJ0ZW1wbGF0ZVVybCIsImNvbnRlbnQiLCJjb250cm9sbGVyIiwiY29udGVudEAiLCJodG1sNU1vZGUiLCIkc2NvcGUiLCIkaHR0cCIsImRhdGFNdXRhdG9yIiwic2V0dXAiLCJnZXREYXRhIiwidGhlbiIsInJlc3BvbnNlIiwiY3N2VG9KU09OIiwiZGF0YSIsImpzb24iLCJnZXRDYXJlZXJTdGF0cyIsInN0YXRzIiwiZXJyIiwiY29uc29sZSIsImVycm9yIiwiaW5mbyIsImRpcmVjdGl2ZSIsInJlc3RyaWN0Iiwic2NvcGUiLCJjZW50dXJ5U3RhdHMiLCJkZXNjcmlwdGlvbiIsImNvbG9yIiwicnVuc1N0YXRzIiwic2VydmljZSIsImdldCIsImNzdiIsImNhbGxiYWNrIiwibGluZXMiLCJzcGxpdCIsInJlc3VsdCIsImhlYWRlcnMiLCJpIiwibGVuZ3RoIiwib2JqIiwiY3VycmVudGxpbmUiLCJqIiwicHVzaCIsInRvdGFsTWF0Y2hlcyIsInRvdGFsUnVucyIsImNlbnR1cmllc1Njb3JlZCIsImhhbGZDZW50dXJpZXNTY29yZWQiLCJhbGxJbm5pbmdzIiwibm90T3V0cyIsImRpZE5vdEJhdCIsIndpY2tldHNUYWtlbiIsInJ1bnNDb25jZWRlZCIsImNhdGNoZXMiLCJmaXJzdElubmluZ3NOb3RvdXRzIiwic2Vjb25kSW5uaW5nc05vdG91dHMiLCJmb3JFYWNoIiwidmFsdWUiLCJpbm5pbmdzRGV0YWlsIiwiY2VudHVyeURldGFpbCIsImhhbGZDZW50dXJ5RGV0YWlsIiwiYmF0dGluZ19zY29yZSIsImluZGV4T2YiLCJiYXR0aW5nX2lubmluZ3MiLCJyZXBsYWNlIiwiaXNOYU4iLCJwYXJzZUludCIsInJ1bnMiLCJhZ2FpbnN0Iiwib3Bwb3NpdGlvbiIsIm1hdGNoX3Jlc3VsdCIsImlubmluZ3MiLCJ5ZWFyIiwiRGF0ZSIsInBhcnNlIiwiZGF0ZSIsImdldEZ1bGxZZWFyIiwid2lja2V0cyIsInJ1bnNfY29uY2VkZWQiLCJ0b3RhbElubmluZ3MiLCJoaWdoZXN0U2NvcmUiLCJNYXRoIiwibWF4IiwiYXBwbHkiLCJtYXAiLCJpbmRleCIsImJhdHRpbmdBdmVyYWdlIiwidG9GaXhlZCIsImJvd2xpbmdBdmVyYWdlIiwiYWxsQ2VudHVyaWVzIiwiJHdhdGNoIiwibiIsImFuYWx5emVDZW50dXJpZXMiLCJzY29yZXMiLCJfIiwicGx1Y2siLCJ0b3RhbEZpZnRpZXMiLCJ0b3RhbEh1bmRyZWRzIiwiY29sb3JzIiwicmVzIiwia2V5Iiwid29uIiwiZmlsdGVyIiwiY2VudCIsImNoYXNpbmdDZW50dXJpZXMiLCJ3aW5jaGFzaW5nQ2VudHVyaWVzIiwibG9zdGNoYXNpbmdDZW50dXJpZXMiLCJ0aWVkY2hhc2luZ0NlbnR1cmllcyIsIm5vcmVzdWx0Y2hhc2luZ0NlbnR1cmllcyIsImNlbnR1cnlBZ2FpbnN0VGVhbXMiLCJ0ZWFtIiwiY2VudHVyeSIsInNjb3JlIiwiY2VudHVyeUJ5WWVhciIsImhhbGZDZW50dXJ5QnlZZWFyIiwiaGFsZkNlbnR1cnkiLCJ3aW5uaW5nUmF0aW8iLCJwcmVwYXJlQmFyR3JhcGgiLCJwcmVwYXJlQmFyR3JhcGhBZ2FpbnN0VGVhbSIsInByZXBhcmVMaW5lR3JhcGgiLCJwcmVwYXJlRG91Z2hudXRDaGFydCIsInByZXBhcmVDb252ZXJzaW9uUmF0ZVBpZUNoYXJ0IiwiYmFyZGF0YSIsImxhYmVscyIsImRhdGFzZXRzIiwibGFiZWwiLCJmaWxsQ29sb3IiLCJzdHJva2VDb2xvciIsInBvaW50Q29sb3IiLCJwb2ludFN0cm9rZUNvbG9yIiwicG9pbnRIaWdobGlnaHRGaWxsIiwicG9pbnRIaWdobGlnaHRTdHJva2UiLCJiYXJvcHRpb25zIiwicmVzcG9uc2l2ZSIsInNjYWxlQmVnaW5BdFplcm8iLCJzY2FsZVNob3dHcmlkTGluZXMiLCJzY2FsZUdyaWRMaW5lQ29sb3IiLCJzY2FsZUdyaWRMaW5lV2lkdGgiLCJiYXJTaG93U3Ryb2tlIiwiYmFyU3Ryb2tlV2lkdGgiLCJiYXJWYWx1ZVNwYWNpbmciLCJiYXJEYXRhc2V0U3BhY2luZyIsImFnYWluc3RGb3JDZW50dXJpZXMiLCJudW1iZXJPZkNlbnR1cmllcyIsImNlbnR1cnlLZXkiLCJoYXNPd25Qcm9wZXJ0eSIsImJhcmRhdGFBZ2FpbnN0VGVhbSIsImJhcm9wdGlvbnNBZ2FpbnN0VGVhbSIsInllYXJPZmNlbnR1cmllcyIsInllYXJPZmhhbGZDZW50dXJpZXMiLCJudW1iZXJPZkhhbGZDZW50dXJpZXMiLCJ5ZWFyV2l0aE5vSGFsZkNlbnR1cnkiLCJlbCIsInllYXJXaXRoTm9DZW50dXJ5IiwiYWxsWWVhcnNGb3JEYXRhIiwidW5pb24iLCJzb3J0IiwiaW5kZXhPZk5vSGFsZmNlbnR1cnkiLCJpbmRleE9mTm9DZW50dXJ5Iiwic3BsaWNlIiwibGluZURhdGEiLCJsaW5lT3B0aW9ucyIsImJlemllckN1cnZlIiwiYmV6aWVyQ3VydmVUZW5zaW9uIiwicG9pbnREb3QiLCJwb2ludERvdFJhZGl1cyIsInBvaW50RG90U3Ryb2tlV2lkdGgiLCJwb2ludEhpdERldGVjdGlvblJhZGl1cyIsImRhdGFzZXRTdHJva2UiLCJkYXRhc2V0U3Ryb2tlV2lkdGgiLCJkYXRhc2V0RmlsbCIsIm9uQW5pbWF0aW9uUHJvZ3Jlc3MiLCJvbkFuaW1hdGlvbkNvbXBsZXRlIiwibG9zdCIsInRpZWQiLCJub3Jlc3VsdCIsInJlc291cmNlcyIsImhpZ2hsaWdodCIsIm9wdGlvbnMiLCJzZWdtZW50U2hvd1N0cm9rZSIsInNlZ21lbnRTdHJva2VDb2xvciIsInNlZ21lbnRTdHJva2VXaWR0aCIsInBlcmNlbnRhZ2VJbm5lckN1dG91dCIsImFuaW1hdGlvblN0ZXBzIiwiYW5pbWF0aW9uRWFzaW5nIiwiYW5pbWF0ZVJvdGF0ZSIsImFuaW1hdGVTY2FsZSIsImZpZnR5IiwiaHVuZHJlZCIsImNvbnZlcnNpb25EYXRhIiwiY29udmVyc2lvbk9wdGlvbnMiLCJhbmFseXplSW5uaW5ncyIsInJ1bnNCeVllYXIiLCJydW5zQWdhaW5zdFRlYW1zIiwiZmlyc3RJbm5pbmdzIiwic2Vjb25kSW5uaW5ncyIsInJ1bnNGaXJzdElubmluZ3MiLCJydW5zU2Vjb25kSW5uaW5ncyIsInByZXBhcmVSdW5zQnlZZWFyR3JhcGgiLCJwcmVwYXJlUnVuc0J5VGVhbUdyYXBoIiwicHJlcGFyZVJ1bnNCeUlubmluZ3NHcmFwaCIsInByZXBhcmVBdmVyYWdlQnlJbm5pbmdzR3JhcGgiLCJ5ZWFycyIsInllYXJCYXJkYXRhIiwieWVhckJhcm9wdGlvbnMiLCJ0ZWFtcyIsInRlYW1CYXJkYXRhIiwidGVhbUJhcm9wdGlvbnMiLCJpbm5pbmluZ3NSdW5zcmVzb3VyY2VzIiwiaW5uaW5pbmdzUnVuc29wdGlvbnMiLCJmaXJzdElubmluZ3NBdmVyYWdlIiwic2Vjb25kSW5uaW5nc0F2ZXJhZ2UiLCJhdmVyYWdlRGF0YSIsImF2ZXJhZ2VPcHRpb25zIl0sIm1hcHBpbmdzIjoiQUFBQUEsUUFBQUMsT0FBQSxPQUNBLFVBQUEsWUFBQSxlQ0RBRCxRQUFBQyxPQUFBLE9BQ0FDLFFB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U0FBQUwsRUFBQUYsRUFBQTVJLEVBQUErSSxFQUFBRixFQUFBNUksR0FDQSxHQUFBMkosR0FBQWQsR0FBQUYsRUFBQTVJLEdBQ0E2SixFQUFBZCxHQUFBRixFQUFBNUksRUFFQWhELEdBQUE2TSxjQUNBM0osTUFBQXlKLEVBQUEzSCxRQUFBLEdBQ0EzRCxNQUFBLFVBQ0FxSixVQUFBLFVBQ0FwRCxNQUFBLDZCQUVBcEUsTUFBQTBKLEVBQUE1SCxRQUFBLEdBQ0EzRCxNQUFBLFVBQ0FxSixVQUFBLFVBQ0FwRCxNQUFBLDhCQUlBdEgsRUFBQThNLGdCQUdBaEYsWUFBQSxFQUdBOEMsbUJBQUEsRUFHQUMsbUJBQUEsT0FHQUMsbUJBQUEsRUFHQUMsc0JBQUEsRUFHQUMsZUFBQSxJQUdBQyxnQkFBQSxnQkFHQUMsZUFBQSxFQUdBQyxjQUFBIiwiZmlsZSI6ImFwcC5idWlsdC5qcyIsInNvdXJjZXNDb250ZW50IjpbImFuZ3VsYXIubW9kdWxlKCdhcHAnLCBbXG4gICAgJ25nUm91dGUnLCAndWkucm91dGVyJywgJ3RjLmNoYXJ0anMnXG5dKTtcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuICAgIC5jb25maWcoZnVuY3Rpb24oJHN0YXRlUHJvdmlkZXIsICR1cmxSb3V0ZXJQcm92aWRlciwgJGxvY2F0aW9uUHJvdmlkZXIpIHtcblxuICAgICAgICAkdXJsUm91dGVyUHJvdmlkZXIub3RoZXJ3aXNlKCcvJyk7XG5cbiAgICAgICAgJHN0YXRlUHJvdmlkZXJcbiAgICAgICAgICAgIC5zdGF0ZSgnYXBwJywge1xuICAgICAgICAgICAgICAgIHVybDogJy8nLFxuICAgICAgICAgICAgICAgIHZpZXdzOiB7XG4gICAgICAgICAgICAgICAgICAgICdoZWFkZXInOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy9uYXYuaHRtbCcsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICdjb250ZW50Jzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcvaG9tZS5odG1sJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdob21lQ3RybCdcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG5cbiAgICAgICAgLnN0YXRlKCdhcHAuaG9tZScsIHtcbiAgICAgICAgICAgIHVybDogJ2hvbWUnLFxuICAgICAgICAgICAgdmlld3M6IHtcbiAgICAgICAgICAgICAgICAnY29udGVudEAnOiB7XG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAndXNlcnMvaG9tZS5odG1sJyxcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ2hvbWVDdHJsJ1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9KTtcbiAgICAgICAgJGxvY2F0aW9uUHJvdmlkZXIuaHRtbDVNb2RlKHRydWUpO1xuXG4gICAgfSk7XG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcbiAgICAuY29udHJvbGxlcignaG9tZUN0cmwnLCBmdW5jdGlvbigkc2NvcGUsICRodHRwLCBkYXRhTXV0YXRvcikge1xuICAgICAgICAkc2NvcGUuc2V0dXAgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIC8vIGdldCB0aGUgY3N2IGRhdGEgZnJvbSBkYXRhTXV0YXRvciBzZXJ2aWNlXG4gICAgICAgICAgICBkYXRhTXV0YXRvci5nZXREYXRhKClcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBjb252ZXJ0IHRoZSBjc3YgZGF0YSB0byBKU09OXG4gICAgICAgICAgICAgICAgICAgIGRhdGFNdXRhdG9yLmNzdlRvSlNPTihyZXNwb25zZS5kYXRhLCBmdW5jdGlvbihqc29uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBwYXNzIHRoZSBjb252ZXJ0ZWQgSlNPTiBkYXRhIHRvIGdldENhcmVlclN0YXRzIGZ1bmN0aW9uIGZvciBtYW5pcHVsYXRpb25cbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFNdXRhdG9yLmdldENhcmVlclN0YXRzKGpzb24sIGZ1bmN0aW9uKHN0YXRzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnN0YXRzID0gc3RhdHM7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgJHNjb3BlLnNldHVwKCk7XG4gICAgfSk7XG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcbiAgICAuY29udHJvbGxlcignbWFzdGVyQ3RybCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAvLyBtYWluIGNvbnRyb2xsZXIgYmluZGVkIHRvIGJvZHkgb2YgdGhlIGFwcCwgYWN0aW9ucyByZXF1aXJlZCBhdCBnbG9iYWwgbGV2ZWwgY2FuIGJlIGRvbmUgaGVyZVxuICAgICAgICBjb25zb2xlLmluZm8oXCJBcHAgTG9hZGVkXCIpO1xuICAgIH0pO1xuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4gICAgLmRpcmVjdGl2ZSgnY2FyZWVyU3RhdHMnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHJlc3RyaWN0OiAnRScsXG4gICAgICAgICAgICBzY29wZToge1xuICAgICAgICAgICAgICAgIHN0YXRzOiAnPWl0ZW0nLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAncGFydGlhbHMvY2FyZWVyU3RhdHMuaHRtbCdcbiAgICAgICAgfTtcbiAgICB9KTtcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuICAgIC5kaXJlY3RpdmUoJ2NlbnR1cnlTdGF0cycsIGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcmVzdHJpY3Q6ICdFJyxcbiAgICAgICAgICAgIHNjb3BlOiB7XG4gICAgICAgICAgICAgICAgY2VudHVyeVN0YXRzOiAnPWl0ZW0nLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAncGFydGlhbHMvY2VudHVyeVN0YXRzLmh0bWwnLFxuICAgICAgICAgICAgY29udHJvbGxlcjogJ2NlbnR1cnlTdGF0c0N0cmwnXG4gICAgICAgIH07XG4gICAgfSk7XG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcbiAgICAuZGlyZWN0aXZlKCdkcmF3Q29uY2x1c2lvbicsIGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcmVzdHJpY3Q6ICdFJyxcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAncGFydGlhbHMvZHJhd0NvbmNsdXNpb24uaHRtbCdcbiAgICAgICAgfTtcbiAgICB9KTtcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuICAgIC5kaXJlY3RpdmUoJ2xlZ2VuZHMnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHJlc3RyaWN0OiAnRUEnLFxuICAgICAgICAgICAgc2NvcGU6IHtcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogJ0AnLFxuICAgICAgICAgICAgICAgIGNvbG9yOiAnQCdcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3BhcnRpYWxzL2xlZ2VuZHMuaHRtbCdcbiAgICAgICAgfTtcbiAgICB9KTtcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuICAgIC5kaXJlY3RpdmUoJ3BlcnNvbmFsSW5mbycsIGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcmVzdHJpY3Q6ICdFJyxcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAncGFydGlhbHMvcGVyc29uYWxJbmZvLmh0bWwnXG4gICAgICAgIH07XG4gICAgfSk7XG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcbiAgICAuZGlyZWN0aXZlKCdydW5zU3RhdHMnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHJlc3RyaWN0OiAnRScsXG4gICAgICAgICAgICBzY29wZToge1xuICAgICAgICAgICAgICAgIHJ1bnNTdGF0czogJz1pdGVtJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3BhcnRpYWxzL3J1bnNTdGF0cy5odG1sJyxcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdydW5zU3RhdHNDdHJsJ1xuICAgICAgICB9O1xuICAgIH0pO1xuIiwiLy8gZGF0YU11dGF0b3IgU2VydmljZVxuLy8gVGhpcyBpcyB0aGUgc2VydmljZSB3aGljaCBkb2VzIHRocmVlIHByaW1hcnkgYWN0aW9uc1xuLy8gMS4gR2V0IGRhdGEgdGhyb3VnaCAkaHR0cCByZXF1ZXN0IGZyb20gdGhlIHNvdXJjZSAoaW4gdGhpcyBjYXNlIGZyb20gcHVibGljL2Fzc2V0cy9kYXRhL3NhY2hpbi5jc3YpXG4vLyAyLiBDb252ZXJ0IHRoZSBkYXRhIHJlY2VpdmVkIGluIGNzdiBmb3JtYXQgdG8gSlNPTiBmb3JtYXQgdG8gcGVyZm9ybSBsb2dpY2FsIG9wZXJhdGlvbnMgb24gaXRcbi8vIDMuIFByZXBhcmUgb3ZlcmFsbCBjYXJlZXIgc3RhdHMgYW5kIGlucHV0cyBmb3IgYWxsQ2VudHVyaWVzIGFuZCBhbGxJbm5pbmdzIHdoaWNoIGNhbiBiZSBmdXJ0aGVyXG4vLyAgICBtYW5pcHVsYXRlZCBpbiB0aGVpciByZXNwZWN0aXZlIGNvbnRyb2xsZXJcbmFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuICAgIC5zZXJ2aWNlKCdkYXRhTXV0YXRvcicsIGZ1bmN0aW9uKCRodHRwKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBnZXREYXRhOiBnZXREYXRhLFxuICAgICAgICAgICAgY3N2VG9KU09OOiBjc3ZUb0pTT04sXG4gICAgICAgICAgICBnZXRDYXJlZXJTdGF0czogZ2V0Q2FyZWVyU3RhdHNcbiAgICAgICAgfTtcblxuICAgICAgICBmdW5jdGlvbiBnZXREYXRhKCkge1xuICAgICAgICAgICAgcmV0dXJuICRodHRwLmdldCgnL2RhdGEvc2FjaGluLmNzdicpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gY3N2VG9KU09OKGNzdiwgY2FsbGJhY2spIHtcbiAgICAgICAgICAgIHZhciBsaW5lcyA9IGNzdi5zcGxpdChcIlxcblwiKTtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgICAgICAgIHZhciBoZWFkZXJzID0gbGluZXNbMF0uc3BsaXQoXCIsXCIpO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBsaW5lcy5sZW5ndGggLSAxOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgb2JqID0ge307XG4gICAgICAgICAgICAgICAgdmFyIGN1cnJlbnRsaW5lID0gbGluZXNbaV0uc3BsaXQoXCIsXCIpO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgaGVhZGVycy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgICAgICBvYmpbaGVhZGVyc1tqXV0gPSBjdXJyZW50bGluZVtqXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2gob2JqKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjYWxsYmFjayAmJiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhyZXN1bHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGdldENhcmVlclN0YXRzKGRhdGEsIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICB2YXIgdG90YWxNYXRjaGVzID0gZGF0YS5sZW5ndGg7XG4gICAgICAgICAgICB2YXIgdG90YWxSdW5zID0gMDtcbiAgICAgICAgICAgIHZhciBjZW50dXJpZXNTY29yZWQgPSBbXTtcbiAgICAgICAgICAgIHZhciBoYWxmQ2VudHVyaWVzU2NvcmVkID0gW107XG4gICAgICAgICAgICB2YXIgYWxsSW5uaW5ncyA9IFtdO1xuICAgICAgICAgICAgdmFyIG5vdE91dHMgPSAwO1xuICAgICAgICAgICAgdmFyIGRpZE5vdEJhdCA9IDA7XG4gICAgICAgICAgICB2YXIgd2lja2V0c1Rha2VuID0gMDtcbiAgICAgICAgICAgIHZhciBydW5zQ29uY2VkZWQgPSAwO1xuICAgICAgICAgICAgdmFyIGNhdGNoZXMgPSAwO1xuICAgICAgICAgICAgdmFyIGZpcnN0SW5uaW5nc05vdG91dHMgPSAwO1xuICAgICAgICAgICAgdmFyIHNlY29uZElubmluZ3NOb3RvdXRzID0gMDtcbiAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaChkYXRhLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHZhciBpbm5pbmdzRGV0YWlsID0ge307XG4gICAgICAgICAgICAgICAgdmFyIGNlbnR1cnlEZXRhaWwgPSB7fTtcbiAgICAgICAgICAgICAgICB2YXIgaGFsZkNlbnR1cnlEZXRhaWwgPSB7fTtcblxuICAgICAgICAgICAgICAgIC8vQmF0dGluZyBzdGF0c1xuXG4gICAgICAgICAgICAgICAgLy9jaGVjayB0byBzZWUgaWYgdGhlIHNjb3JlIGNvbnRhaW5zIGEgJyonJyBpbiB0aGUgZW5kIHdoaWNoIGRlbnRvZXMgTm90T3V0cywgaWYgeWVzIHJlbW92ZSBmb3IgY2FsY3VsYXRpb25zXG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlLmJhdHRpbmdfc2NvcmUuaW5kZXhPZihcIipcIikgPiAtMSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUuYmF0dGluZ19pbm5pbmdzID09IFwiMXN0XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpcnN0SW5uaW5nc05vdG91dHMrKztcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlY29uZElubmluZ3NOb3RvdXRzKys7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdmFsdWUuYmF0dGluZ19zY29yZSA9IHZhbHVlLmJhdHRpbmdfc2NvcmUucmVwbGFjZSgnKicsICcnKTtcbiAgICAgICAgICAgICAgICAgICAgbm90T3V0cysrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvL2lmIHRoZSB2YWx1ZSBvZiBzY29yZSBpcyBOb3QgYSBudW1iZXIgLCBpdCBtZWFucyBpdCBjb3VsZCBiZSBETkIoZGlkIG5vdCBiYXQpIG9yIFRETkIgKHRlYW0gZGlkIG5vdCBiYXQpXG4gICAgICAgICAgICAgICAgaWYgKGlzTmFOKHZhbHVlLmJhdHRpbmdfc2NvcmUpKSB7XG4gICAgICAgICAgICAgICAgICAgIGRpZE5vdEJhdCsrO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vQ29udmVydGluZyB0aGUgc3RyaW5nIHRvIGludGVnZXJzIHRvIGRvIGNhbGN1bGF0aW9uc1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZS5iYXR0aW5nX3Njb3JlID0gcGFyc2VJbnQodmFsdWUuYmF0dGluZ19zY29yZSk7XG4gICAgICAgICAgICAgICAgICAgIC8vR2V0dGluZyBhbGwgaW5uaW5ncyBydW5zXG4gICAgICAgICAgICAgICAgICAgIGlubmluZ3NEZXRhaWwucnVucyA9IHZhbHVlLmJhdHRpbmdfc2NvcmU7XG4gICAgICAgICAgICAgICAgICAgIGlubmluZ3NEZXRhaWwuYWdhaW5zdCA9IHZhbHVlLm9wcG9zaXRpb247XG4gICAgICAgICAgICAgICAgICAgIGlubmluZ3NEZXRhaWwucmVzdWx0ID0gdmFsdWUubWF0Y2hfcmVzdWx0O1xuICAgICAgICAgICAgICAgICAgICBpbm5pbmdzRGV0YWlsLmlubmluZ3MgPSB2YWx1ZS5iYXR0aW5nX2lubmluZ3M7XG4gICAgICAgICAgICAgICAgICAgIGlubmluZ3NEZXRhaWwueWVhciA9IChuZXcgRGF0ZShEYXRlLnBhcnNlKHZhbHVlLmRhdGUpKSkuZ2V0RnVsbFllYXIoKTtcbiAgICAgICAgICAgICAgICAgICAgYWxsSW5uaW5ncy5wdXNoKGlubmluZ3NEZXRhaWwpO1xuXG5cbiAgICAgICAgICAgICAgICAgICAgLy9DaGVja2luZyB0byBzZWUgaWYgdGhlIHNjb3JlIHdhcyBhIGhhbGYgY2VudHVyeSBvciBjZW50dXJ5XG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZS5iYXR0aW5nX3Njb3JlID49IDUwICYmIHZhbHVlLmJhdHRpbmdfc2NvcmUgPCAxMDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhhbGZDZW50dXJ5RGV0YWlsLnJ1bnMgPSB2YWx1ZS5iYXR0aW5nX3Njb3JlO1xuICAgICAgICAgICAgICAgICAgICAgICAgaGFsZkNlbnR1cnlEZXRhaWwuYWdhaW5zdCA9IHZhbHVlLm9wcG9zaXRpb247XG4gICAgICAgICAgICAgICAgICAgICAgICBoYWxmQ2VudHVyeURldGFpbC5yZXN1bHQgPSB2YWx1ZS5tYXRjaF9yZXN1bHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBoYWxmQ2VudHVyeURldGFpbC5pbm5pbmdzID0gdmFsdWUuYmF0dGluZ19pbm5pbmdzO1xuICAgICAgICAgICAgICAgICAgICAgICAgaGFsZkNlbnR1cnlEZXRhaWwueWVhciA9IChuZXcgRGF0ZShEYXRlLnBhcnNlKHZhbHVlLmRhdGUpKSkuZ2V0RnVsbFllYXIoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhhbGZDZW50dXJpZXNTY29yZWQucHVzaChoYWxmQ2VudHVyeURldGFpbCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodmFsdWUuYmF0dGluZ19zY29yZSA+PSAxMDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNlbnR1cnlEZXRhaWwucnVucyA9IHZhbHVlLmJhdHRpbmdfc2NvcmU7XG4gICAgICAgICAgICAgICAgICAgICAgICBjZW50dXJ5RGV0YWlsLmFnYWluc3QgPSB2YWx1ZS5vcHBvc2l0aW9uO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2VudHVyeURldGFpbC5yZXN1bHQgPSB2YWx1ZS5tYXRjaF9yZXN1bHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBjZW50dXJ5RGV0YWlsLmlubmluZ3MgPSB2YWx1ZS5iYXR0aW5nX2lubmluZ3M7XG4gICAgICAgICAgICAgICAgICAgICAgICBjZW50dXJ5RGV0YWlsLnllYXIgPSAobmV3IERhdGUoRGF0ZS5wYXJzZSh2YWx1ZS5kYXRlKSkpLmdldEZ1bGxZZWFyKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjZW50dXJpZXNTY29yZWQucHVzaChjZW50dXJ5RGV0YWlsKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvL1NhdmluZyB0b3RhbCBydW5zXG4gICAgICAgICAgICAgICAgICAgIHRvdGFsUnVucyArPSB2YWx1ZS5iYXR0aW5nX3Njb3JlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vQm93bGluZyBzdGF0c1xuICAgICAgICAgICAgICAgIGlmICghaXNOYU4odmFsdWUud2lja2V0cykgJiYgcGFyc2VJbnQodmFsdWUud2lja2V0cykgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlLndpY2tldHMgPSBwYXJzZUludCh2YWx1ZS53aWNrZXRzKTtcbiAgICAgICAgICAgICAgICAgICAgd2lja2V0c1Rha2VuICs9IHZhbHVlLndpY2tldHM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghaXNOYU4odmFsdWUuY2F0Y2hlcykgJiYgcGFyc2VJbnQodmFsdWUuY2F0Y2hlcykgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlLmNhdGNoZXMgPSBwYXJzZUludCh2YWx1ZS5jYXRjaGVzKTtcbiAgICAgICAgICAgICAgICAgICAgY2F0Y2hlcyArPSB2YWx1ZS5jYXRjaGVzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoIWlzTmFOKHZhbHVlLnJ1bnNfY29uY2VkZWQpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlLnJ1bnNfY29uY2VkZWQgPSBwYXJzZUludCh2YWx1ZS5ydW5zX2NvbmNlZGVkKTtcbiAgICAgICAgICAgICAgICAgICAgcnVuc0NvbmNlZGVkICs9IHZhbHVlLnJ1bnNfY29uY2VkZWQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHZhciB0b3RhbElubmluZ3MgPSB0b3RhbE1hdGNoZXMgLSBkaWROb3RCYXQ7XG4gICAgICAgICAgICB2YXIgc3RhdHMgPSB7XG4gICAgICAgICAgICAgICAgdG90YWxNYXRjaGVzOiB0b3RhbE1hdGNoZXMsXG4gICAgICAgICAgICAgICAgdG90YWxSdW5zOiB0b3RhbFJ1bnMsXG4gICAgICAgICAgICAgICAgaGFsZkNlbnR1cmllc1Njb3JlZDogaGFsZkNlbnR1cmllc1Njb3JlZC5sZW5ndGgsXG4gICAgICAgICAgICAgICAgY2VudHVyaWVzU2NvcmVkOiBjZW50dXJpZXNTY29yZWQubGVuZ3RoLFxuICAgICAgICAgICAgICAgIGhpZ2hlc3RTY29yZTogTWF0aC5tYXguYXBwbHkobnVsbCwgY2VudHVyaWVzU2NvcmVkLm1hcChmdW5jdGlvbihpbmRleCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaW5kZXgucnVucztcbiAgICAgICAgICAgICAgICB9KSksXG4gICAgICAgICAgICAgICAgbm90T3V0czogbm90T3V0cyxcbiAgICAgICAgICAgICAgICB0b3RhbElubmluZ3M6IHRvdGFsSW5uaW5ncyxcbiAgICAgICAgICAgICAgICBiYXR0aW5nQXZlcmFnZTogKHRvdGFsUnVucyAvICh0b3RhbElubmluZ3MgLSBub3RPdXRzKSkudG9GaXhlZCgyKSxcbiAgICAgICAgICAgICAgICB3aWNrZXRzVGFrZW46IHdpY2tldHNUYWtlbixcbiAgICAgICAgICAgICAgICBydW5zQ29uY2VkZWQ6IHJ1bnNDb25jZWRlZCxcbiAgICAgICAgICAgICAgICBib3dsaW5nQXZlcmFnZTogKHJ1bnNDb25jZWRlZCAvIHdpY2tldHNUYWtlbikudG9GaXhlZCgyKSxcbiAgICAgICAgICAgICAgICBjYXRjaGVzOiBjYXRjaGVzLFxuICAgICAgICAgICAgICAgIC8vc2VuZCBhbGxDZW50dXJpZXMgYXMgYW4gb2JqZWN0IHdpdGggcmVxdWlyZWQgaW5mb3JtYXRpb24gZm9yIGNhbGN1bGF0aW9ucyBpbiBjZW50dXJ5U3RhdHNDdHJsXG4gICAgICAgICAgICAgICAgYWxsQ2VudHVyaWVzOiB7XG4gICAgICAgICAgICAgICAgICAgIFwiY2VudHVyaWVzU2NvcmVkXCI6IGNlbnR1cmllc1Njb3JlZCxcbiAgICAgICAgICAgICAgICAgICAgXCJoYWxmQ2VudHVyaWVzU2NvcmVkXCI6IGhhbGZDZW50dXJpZXNTY29yZWRcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIC8vc2VuZCBhbGxJbm5pbmdzIGFzIGFuIG9iamVjdCB3aXRoIHJlcXVpcmVkIGluZm9ybWF0aW9uIGZvciBjYWxjdWxhdGlvbnMgaW4gcnVuc1N0YXRzQ3RybFxuICAgICAgICAgICAgICAgIGFsbElubmluZ3M6IHtcbiAgICAgICAgICAgICAgICAgICAgXCJhbGxJbm5pbmdzXCI6IGFsbElubmluZ3MsXG4gICAgICAgICAgICAgICAgICAgIFwiZmlyc3RJbm5pbmdzTm90b3V0c1wiOiBmaXJzdElubmluZ3NOb3RvdXRzLFxuICAgICAgICAgICAgICAgICAgICBcInNlY29uZElubmluZ3NOb3RvdXRzXCI6IHNlY29uZElubmluZ3NOb3RvdXRzXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGlmIChjYWxsYmFjayAmJiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhzdGF0cyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gc3RhdHM7XG4gICAgICAgIH1cbiAgICB9KTtcbiIsIi8vIENlbnR1cnkgU3RhdHMgY29udHJvbGxlclxuLy8gVGhpcyBjb250cm9sbGVyIGlzIGF0dGFjaGVkIHRvIGEgZGlyZWN0aXZlIC0gY2VudHVyeVN0YXRzXG4vLyBhbmQgdGhlIHB1cnBvc2Ugb2YgdGhpcyBjb250cm9sbGVyIGlzIHRvIHdvcmsgb24gdGhlIGNlbnR1cnlTdGF0cyBwYXNzZWQgdG8gaXRzICRzY29wZSB2aWEgaXRzIGF0dHJpYnV0ZVxuXG5hbmd1bGFyLm1vZHVsZSgnYXBwJylcbiAgICAuY29udHJvbGxlcignY2VudHVyeVN0YXRzQ3RybCcsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAvLyBXYXRjaCBmb3IgdGhlICRzY29wZS5jZW50dXJ5U3RhdHMgdmFyaWFibGUgdG8gZ2V0IHRoZSBkYXRhIGZyb20gYXR0cmlidXRlXG4gICAgICAgICRzY29wZS4kd2F0Y2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gJHNjb3BlLmNlbnR1cnlTdGF0cztcbiAgICAgICAgfSwgZnVuY3Rpb24obikge1xuICAgICAgICAgICAgaWYgKCFuKSByZXR1cm47XG4gICAgICAgICAgICAvLyBJZiBpdCBoYXMgcmVjZWl2ZWQgZGF0YSB0aGVuIHN0YXJ0IHdvcmtpbmcgb24gQW5hbHl6aW5nIENlbnR1cmllc1xuICAgICAgICAgICAgJHNjb3BlLmFuYWx5emVDZW50dXJpZXMoJHNjb3BlLmNlbnR1cnlTdGF0cyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgICRzY29wZS5hbmFseXplQ2VudHVyaWVzID0gZnVuY3Rpb24oY2VudHVyeVN0YXRzKSB7XG4gICAgICAgICAgICAvL0dldCB0aGUgcnVucyBzY29yZWQgd2hpbGUgbWFraW5nIGEgY2VudHVyeVxuICAgICAgICAgICAgdmFyIHNjb3JlcyA9IF8ucGx1Y2soY2VudHVyeVN0YXRzLmNlbnR1cmllc1Njb3JlZCwgJ3J1bnMnKTtcblxuICAgICAgICAgICAgLy9HZXQgdGhlIG9wcG9uZW50cyBhZ2FpbnNlIHdoaWNoIHRoZSBjZW50dXJ5IHdhcyBzY29yZWRcbiAgICAgICAgICAgIHZhciBhZ2FpbnN0ID0gXy5wbHVjayhjZW50dXJ5U3RhdHMuY2VudHVyaWVzU2NvcmVkLCAnYWdhaW5zdCcpO1xuXG4gICAgICAgICAgICAvL0dldCB0aGUgdG90YWwgbnVtYmVyIG9mIGhhbGYgY2VudHVyaWVzIHNjb3JlZFxuICAgICAgICAgICAgdmFyIHRvdGFsRmlmdGllcyA9IGNlbnR1cnlTdGF0cy5oYWxmQ2VudHVyaWVzU2NvcmVkLmxlbmd0aDtcblxuICAgICAgICAgICAgLy9HZXQgdGhlIHRvdGFsIG51bWJlciBvZiBjZW50dXJpZXMgc2NvcmVkXG4gICAgICAgICAgICB2YXIgdG90YWxIdW5kcmVkcyA9IGNlbnR1cnlTdGF0cy5jZW50dXJpZXNTY29yZWQubGVuZ3RoO1xuICAgICAgICAgICAgLy9TZW5kIGFycmF5IG9mIGNvbG9ycyB0byBjaGFydGpzXG4gICAgICAgICAgICB2YXIgY29sb3JzID0gW107XG4gICAgICAgICAgICBjZW50dXJ5U3RhdHMuY2VudHVyaWVzU2NvcmVkLm1hcChmdW5jdGlvbihyZXMsIGtleSkge1xuICAgICAgICAgICAgICAgIGlmIChyZXMucmVzdWx0ID09IFwid29uXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgY29sb3JzW2tleV0gPSBcIiMwMDg0RkZcIjtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHJlcy5yZXN1bHQgPT0gXCJsb3N0XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgY29sb3JzW2tleV0gPSBcIiNFRDNGMkZcIjtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHJlcy5yZXN1bHQgPT0gXCJ0aWVkXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgY29sb3JzW2tleV0gPSBcIiNERkY4RUJcIjtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjb2xvcnNba2V5XSA9IFwiI0REQjk2N1wiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gY29sb3JzO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB2YXIgd29uID0gXy5maWx0ZXIoY2VudHVyeVN0YXRzLmNlbnR1cmllc1Njb3JlZCwgZnVuY3Rpb24oY2VudCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjZW50LnJlc3VsdCA9PSBcIndvblwiO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAvLyB2YXIgbG9zdCA9IF8uZmlsdGVyKGNlbnR1cnlTdGF0cy5jZW50dXJpZXNTY29yZWQsIGZ1bmN0aW9uKGNlbnQpe1xuICAgICAgICAgICAgLy8gICByZXR1cm4gY2VudC5yZXN1bHQgPT09IFwibG9zdFwiXG4gICAgICAgICAgICAvLyB9KVxuICAgICAgICAgICAgLy8gdmFyIHRpZWQgPSBfLmZpbHRlcihjZW50dXJ5U3RhdHMuY2VudHVyaWVzU2NvcmVkLCBmdW5jdGlvbihjZW50KXtcbiAgICAgICAgICAgIC8vICAgcmV0dXJuIGNlbnQucmVzdWx0ID09PSBcInRpZWRcIlxuICAgICAgICAgICAgLy8gfSlcbiAgICAgICAgICAgIC8vIHZhciBub3Jlc3VsdCA9IF8uZmlsdGVyKGNlbnR1cnlTdGF0cy5jZW50dXJpZXNTY29yZWQsIGZ1bmN0aW9uKGNlbnQpe1xuICAgICAgICAgICAgLy8gICByZXR1cm4gY2VudC5yZXN1bHQgPT09IFwibi9yXCJcbiAgICAgICAgICAgIC8vIH0pXG5cbiAgICAgICAgICAgIC8vQ2VudHVyeSB3aGlsZSBjaGFzaW5nXG4gICAgICAgICAgICB2YXIgY2hhc2luZ0NlbnR1cmllcyA9IF8uZmlsdGVyKGNlbnR1cnlTdGF0cy5jZW50dXJpZXNTY29yZWQsIGZ1bmN0aW9uKGNlbnQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY2VudC5pbm5pbmdzID09IFwiMm5kXCI7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHZhciB3aW5jaGFzaW5nQ2VudHVyaWVzID0gXy5maWx0ZXIoY2hhc2luZ0NlbnR1cmllcywgZnVuY3Rpb24oY2VudCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjZW50LnJlc3VsdCA9PSBcIndvblwiO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB2YXIgbG9zdGNoYXNpbmdDZW50dXJpZXMgPSBfLmZpbHRlcihjaGFzaW5nQ2VudHVyaWVzLCBmdW5jdGlvbihjZW50KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNlbnQucmVzdWx0ID09PSBcImxvc3RcIjtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdmFyIHRpZWRjaGFzaW5nQ2VudHVyaWVzID0gXy5maWx0ZXIoY2hhc2luZ0NlbnR1cmllcywgZnVuY3Rpb24oY2VudCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjZW50LnJlc3VsdCA9PT0gXCJ0aWVkXCI7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHZhciBub3Jlc3VsdGNoYXNpbmdDZW50dXJpZXMgPSBfLmZpbHRlcihjaGFzaW5nQ2VudHVyaWVzLCBmdW5jdGlvbihjZW50KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNlbnQucmVzdWx0ID09PSBcIm4vclwiO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vQ2VudHVyeSBhZ2FpbnN0IHRlYW1zXG4gICAgICAgICAgICB2YXIgY2VudHVyeUFnYWluc3RUZWFtcyA9IFtdO1xuICAgICAgICAgICAgY2VudHVyeVN0YXRzLmNlbnR1cmllc1Njb3JlZC5tYXAoZnVuY3Rpb24ocmVzKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRlYW0gPSByZXMuYWdhaW5zdDtcbiAgICAgICAgICAgICAgICB2YXIgY2VudHVyeSA9IHtcbiAgICAgICAgICAgICAgICAgICAgc2NvcmU6IHJlcy5ydW5zXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mKGNlbnR1cnlBZ2FpbnN0VGVhbXNbdGVhbV0pID09IFwidW5kZWZpbmVkXCIpXG4gICAgICAgICAgICAgICAgICAgIGNlbnR1cnlBZ2FpbnN0VGVhbXNbdGVhbV0gPSBbXTtcbiAgICAgICAgICAgICAgICByZXR1cm4gY2VudHVyeUFnYWluc3RUZWFtc1t0ZWFtXS5wdXNoKGNlbnR1cnkpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vQ2VudHVyeSBvdmVyIHRoZSB5ZWFyc1xuICAgICAgICAgICAgdmFyIGNlbnR1cnlCeVllYXIgPSBbXTtcbiAgICAgICAgICAgIGNlbnR1cnlTdGF0cy5jZW50dXJpZXNTY29yZWQubWFwKGZ1bmN0aW9uKHJlcykge1xuICAgICAgICAgICAgICAgIHZhciB5ZWFyID0gcmVzLnllYXI7XG4gICAgICAgICAgICAgICAgdmFyIGNlbnR1cnkgPSB7XG4gICAgICAgICAgICAgICAgICAgIHNjb3JlOiByZXMucnVuc1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZihjZW50dXJ5QnlZZWFyW3llYXJdKSA9PSBcInVuZGVmaW5lZFwiKVxuICAgICAgICAgICAgICAgICAgICBjZW50dXJ5QnlZZWFyW3llYXJdID0gW107XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNlbnR1cnlCeVllYXJbeWVhcl0ucHVzaChjZW50dXJ5KTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB2YXIgaGFsZkNlbnR1cnlCeVllYXIgPSBbXTtcbiAgICAgICAgICAgIGNlbnR1cnlTdGF0cy5oYWxmQ2VudHVyaWVzU2NvcmVkLm1hcChmdW5jdGlvbihyZXMpIHtcbiAgICAgICAgICAgICAgICB2YXIgeWVhciA9IHJlcy55ZWFyO1xuICAgICAgICAgICAgICAgIHZhciBoYWxmQ2VudHVyeSA9IHtcbiAgICAgICAgICAgICAgICAgICAgc2NvcmU6IHJlcy5ydW5zXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mKGhhbGZDZW50dXJ5QnlZZWFyW3llYXJdKSA9PSBcInVuZGVmaW5lZFwiKVxuICAgICAgICAgICAgICAgICAgICBoYWxmQ2VudHVyeUJ5WWVhclt5ZWFyXSA9IFtdO1xuICAgICAgICAgICAgICAgIHJldHVybiBoYWxmQ2VudHVyeUJ5WWVhclt5ZWFyXS5wdXNoKGhhbGZDZW50dXJ5KTtcbiAgICAgICAgICAgIH0pO1xuXG5cbiAgICAgICAgICAgICRzY29wZS53aW5uaW5nUmF0aW8gPSAod29uLmxlbmd0aCAvIGNlbnR1cnlTdGF0cy5jZW50dXJpZXNTY29yZWQubGVuZ3RoKS50b0ZpeGVkKDIpICogMTA7XG4gICAgICAgICAgICAkc2NvcGUucHJlcGFyZUJhckdyYXBoKHNjb3JlcywgYWdhaW5zdCwgY29sb3JzKTtcbiAgICAgICAgICAgICRzY29wZS5wcmVwYXJlQmFyR3JhcGhBZ2FpbnN0VGVhbShjZW50dXJ5QWdhaW5zdFRlYW1zKTtcbiAgICAgICAgICAgICRzY29wZS5wcmVwYXJlTGluZUdyYXBoKGNlbnR1cnlCeVllYXIsIGhhbGZDZW50dXJ5QnlZZWFyKTtcbiAgICAgICAgICAgICRzY29wZS5wcmVwYXJlRG91Z2hudXRDaGFydCh3aW5jaGFzaW5nQ2VudHVyaWVzLmxlbmd0aCwgbG9zdGNoYXNpbmdDZW50dXJpZXMubGVuZ3RoLCB0aWVkY2hhc2luZ0NlbnR1cmllcy5sZW5ndGgsIG5vcmVzdWx0Y2hhc2luZ0NlbnR1cmllcy5sZW5ndGgpO1xuICAgICAgICAgICAgJHNjb3BlLnByZXBhcmVDb252ZXJzaW9uUmF0ZVBpZUNoYXJ0KHRvdGFsRmlmdGllcywgdG90YWxIdW5kcmVkcyk7XG4gICAgICAgIH07XG5cblxuICAgICAgICAvLyBQcmVwYXJlIEJhciBncmFwaCB0byBzaG93IENlbnR1cnkgYWdhaW5zdCB0ZWFtcyBhbmQgdGhlIG1hdGNoIHJlc3VsdCB2aWEgY29sb3JzXG4gICAgICAgICRzY29wZS5wcmVwYXJlQmFyR3JhcGggPSBmdW5jdGlvbihzY29yZXMsIGFnYWluc3QsIGNvbG9ycykge1xuICAgICAgICAgICAgJHNjb3BlLmJhcmRhdGEgPSB7XG4gICAgICAgICAgICAgICAgbGFiZWxzOiBhZ2FpbnN0LFxuICAgICAgICAgICAgICAgIGRhdGFzZXRzOiBbe1xuICAgICAgICAgICAgICAgICAgICBsYWJlbDogJ0NlbnR1cmllcycsXG4gICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogY29sb3JzLFxuICAgICAgICAgICAgICAgICAgICBzdHJva2VDb2xvcjogJ3JnYmEoMjIwLDIyMCwyMjAsMSknLFxuICAgICAgICAgICAgICAgICAgICBwb2ludENvbG9yOiAncmdiYSgyMjAsMjIwLDIyMCwxKScsXG4gICAgICAgICAgICAgICAgICAgIHBvaW50U3Ryb2tlQ29sb3I6ICcjZmZmJyxcbiAgICAgICAgICAgICAgICAgICAgcG9pbnRIaWdobGlnaHRGaWxsOiAnI2ZmZicsXG4gICAgICAgICAgICAgICAgICAgIHBvaW50SGlnaGxpZ2h0U3Ryb2tlOiAncmdiYSgyMjAsMjIwLDIyMCwxKScsXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IHNjb3Jlc1xuICAgICAgICAgICAgICAgIH1dXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvLyBDaGFydC5qcyBPcHRpb25zXG4gICAgICAgICAgICAkc2NvcGUuYmFyb3B0aW9ucyA9IHtcblxuICAgICAgICAgICAgICAgIC8vIFNldHMgdGhlIGNoYXJ0IHRvIGJlIHJlc3BvbnNpdmVcbiAgICAgICAgICAgICAgICByZXNwb25zaXZlOiB0cnVlLFxuXG4gICAgICAgICAgICAgICAgLy9Cb29sZWFuIC0gV2hldGhlciB0aGUgc2NhbGUgc2hvdWxkIHN0YXJ0IGF0IHplcm8sIG9yIGFuIG9yZGVyIG9mIG1hZ25pdHVkZSBkb3duIGZyb20gdGhlIGxvd2VzdCB2YWx1ZVxuICAgICAgICAgICAgICAgIHNjYWxlQmVnaW5BdFplcm86IHRydWUsXG5cbiAgICAgICAgICAgICAgICAvL0Jvb2xlYW4gLSBXaGV0aGVyIGdyaWQgbGluZXMgYXJlIHNob3duIGFjcm9zcyB0aGUgY2hhcnRcbiAgICAgICAgICAgICAgICBzY2FsZVNob3dHcmlkTGluZXM6IHRydWUsXG5cbiAgICAgICAgICAgICAgICAvL1N0cmluZyAtIENvbG91ciBvZiB0aGUgZ3JpZCBsaW5lc1xuICAgICAgICAgICAgICAgIHNjYWxlR3JpZExpbmVDb2xvcjogXCJyZ2JhKDAsMCwwLC4wNSlcIixcblxuICAgICAgICAgICAgICAgIC8vTnVtYmVyIC0gV2lkdGggb2YgdGhlIGdyaWQgbGluZXNcbiAgICAgICAgICAgICAgICBzY2FsZUdyaWRMaW5lV2lkdGg6IDEsXG5cbiAgICAgICAgICAgICAgICAvL0Jvb2xlYW4gLSBJZiB0aGVyZSBpcyBhIHN0cm9rZSBvbiBlYWNoIGJhclxuICAgICAgICAgICAgICAgIGJhclNob3dTdHJva2U6IHRydWUsXG5cbiAgICAgICAgICAgICAgICAvL051bWJlciAtIFBpeGVsIHdpZHRoIG9mIHRoZSBiYXIgc3Ryb2tlXG4gICAgICAgICAgICAgICAgYmFyU3Ryb2tlV2lkdGg6IDIsXG5cbiAgICAgICAgICAgICAgICAvL051bWJlciAtIFNwYWNpbmcgYmV0d2VlbiBlYWNoIG9mIHRoZSBYIHZhbHVlIHNldHNcbiAgICAgICAgICAgICAgICBiYXJWYWx1ZVNwYWNpbmc6IDUsXG5cbiAgICAgICAgICAgICAgICAvL051bWJlciAtIFNwYWNpbmcgYmV0d2VlbiBkYXRhIHNldHMgd2l0aGluIFggdmFsdWVzXG4gICAgICAgICAgICAgICAgYmFyRGF0YXNldFNwYWNpbmc6IDFcbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG5cbiAgICAgICAgLy9QcmVwYXJlIGJhciBncmFwaCB0byBzaG93IG51bWJlciBvZiBjZW50dXJpZXMgYWdhaW5zdCB0ZWFtc1xuICAgICAgICAkc2NvcGUucHJlcGFyZUJhckdyYXBoQWdhaW5zdFRlYW0gPSBmdW5jdGlvbihjZW50dXJ5QWdhaW5zdFRlYW1zKSB7XG4gICAgICAgICAgICB2YXIgYWdhaW5zdEZvckNlbnR1cmllcyA9IFtdO1xuICAgICAgICAgICAgdmFyIG51bWJlck9mQ2VudHVyaWVzID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBjZW50dXJ5S2V5IGluIGNlbnR1cnlBZ2FpbnN0VGVhbXMpIHtcbiAgICAgICAgICAgICAgICBpZiAoY2VudHVyeUFnYWluc3RUZWFtcy5oYXNPd25Qcm9wZXJ0eShjZW50dXJ5S2V5KSkge1xuICAgICAgICAgICAgICAgICAgICBhZ2FpbnN0Rm9yQ2VudHVyaWVzLnB1c2goY2VudHVyeUtleSk7XG4gICAgICAgICAgICAgICAgICAgIG51bWJlck9mQ2VudHVyaWVzLnB1c2goY2VudHVyeUFnYWluc3RUZWFtc1tjZW50dXJ5S2V5XS5sZW5ndGgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICRzY29wZS5iYXJkYXRhQWdhaW5zdFRlYW0gPSB7XG4gICAgICAgICAgICAgICAgbGFiZWxzOiBhZ2FpbnN0Rm9yQ2VudHVyaWVzLFxuICAgICAgICAgICAgICAgIGRhdGFzZXRzOiBbe1xuICAgICAgICAgICAgICAgICAgICBsYWJlbDogJ0NlbnR1cmllcycsXG4gICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogWycjMDA4NEZGJ10sXG4gICAgICAgICAgICAgICAgICAgIHN0cm9rZUNvbG9yOiAncmdiYSgyMjAsMjIwLDIyMCwxKScsXG4gICAgICAgICAgICAgICAgICAgIHBvaW50Q29sb3I6ICdyZ2JhKDIyMCwyMjAsMjIwLDEpJyxcbiAgICAgICAgICAgICAgICAgICAgcG9pbnRTdHJva2VDb2xvcjogJyNmZmYnLFxuICAgICAgICAgICAgICAgICAgICBwb2ludEhpZ2hsaWdodEZpbGw6ICcjZmZmJyxcbiAgICAgICAgICAgICAgICAgICAgcG9pbnRIaWdobGlnaHRTdHJva2U6ICdyZ2JhKDIyMCwyMjAsMjIwLDEpJyxcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogbnVtYmVyT2ZDZW50dXJpZXNcbiAgICAgICAgICAgICAgICB9XVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgLy8gQ2hhcnQuanMgT3B0aW9uc1xuICAgICAgICAgICAgJHNjb3BlLmJhcm9wdGlvbnNBZ2FpbnN0VGVhbSA9IHtcblxuICAgICAgICAgICAgICAgIC8vIFNldHMgdGhlIGNoYXJ0IHRvIGJlIHJlc3BvbnNpdmVcbiAgICAgICAgICAgICAgICByZXNwb25zaXZlOiB0cnVlLFxuXG4gICAgICAgICAgICAgICAgLy9Cb29sZWFuIC0gV2hldGhlciB0aGUgc2NhbGUgc2hvdWxkIHN0YXJ0IGF0IHplcm8sIG9yIGFuIG9yZGVyIG9mIG1hZ25pdHVkZSBkb3duIGZyb20gdGhlIGxvd2VzdCB2YWx1ZVxuICAgICAgICAgICAgICAgIHNjYWxlQmVnaW5BdFplcm86IHRydWUsXG5cbiAgICAgICAgICAgICAgICAvL0Jvb2xlYW4gLSBXaGV0aGVyIGdyaWQgbGluZXMgYXJlIHNob3duIGFjcm9zcyB0aGUgY2hhcnRcbiAgICAgICAgICAgICAgICBzY2FsZVNob3dHcmlkTGluZXM6IHRydWUsXG5cbiAgICAgICAgICAgICAgICAvL1N0cmluZyAtIENvbG91ciBvZiB0aGUgZ3JpZCBsaW5lc1xuICAgICAgICAgICAgICAgIHNjYWxlR3JpZExpbmVDb2xvcjogXCJyZ2JhKDAsMCwwLC4wNSlcIixcblxuICAgICAgICAgICAgICAgIC8vTnVtYmVyIC0gV2lkdGggb2YgdGhlIGdyaWQgbGluZXNcbiAgICAgICAgICAgICAgICBzY2FsZUdyaWRMaW5lV2lkdGg6IDEsXG5cbiAgICAgICAgICAgICAgICAvL0Jvb2xlYW4gLSBJZiB0aGVyZSBpcyBhIHN0cm9rZSBvbiBlYWNoIGJhclxuICAgICAgICAgICAgICAgIGJhclNob3dTdHJva2U6IHRydWUsXG5cbiAgICAgICAgICAgICAgICAvL051bWJlciAtIFBpeGVsIHdpZHRoIG9mIHRoZSBiYXIgc3Ryb2tlXG4gICAgICAgICAgICAgICAgYmFyU3Ryb2tlV2lkdGg6IDIsXG5cbiAgICAgICAgICAgICAgICAvL051bWJlciAtIFNwYWNpbmcgYmV0d2VlbiBlYWNoIG9mIHRoZSBYIHZhbHVlIHNldHNcbiAgICAgICAgICAgICAgICBiYXJWYWx1ZVNwYWNpbmc6IDUsXG5cbiAgICAgICAgICAgICAgICAvL051bWJlciAtIFNwYWNpbmcgYmV0d2VlbiBkYXRhIHNldHMgd2l0aGluIFggdmFsdWVzXG4gICAgICAgICAgICAgICAgYmFyRGF0YXNldFNwYWNpbmc6IDFcbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gUHJlcGFyZSBMaW5lIEdyYXBoIHRvIHNob3cgY2VudHVyaWVzIGFuZCBoYWxmIGNlbnR1cmllcyBvdmVyIHRoZSB5ZWFyXG4gICAgICAgICRzY29wZS5wcmVwYXJlTGluZUdyYXBoID0gZnVuY3Rpb24oY2VudHVyeUJ5WWVhciwgaGFsZkNlbnR1cnlCeVllYXIpIHtcbiAgICAgICAgICAgIHZhciB5ZWFyT2ZjZW50dXJpZXMgPSBbXTtcbiAgICAgICAgICAgIHZhciBudW1iZXJPZkNlbnR1cmllcyA9IFtdO1xuXG4gICAgICAgICAgICBmb3IgKHZhciBjZW50dXJ5IGluIGNlbnR1cnlCeVllYXIpIHtcbiAgICAgICAgICAgICAgICBpZiAoY2VudHVyeUJ5WWVhci5oYXNPd25Qcm9wZXJ0eShjZW50dXJ5KSkge1xuICAgICAgICAgICAgICAgICAgICB5ZWFyT2ZjZW50dXJpZXMucHVzaChjZW50dXJ5KTtcbiAgICAgICAgICAgICAgICAgICAgbnVtYmVyT2ZDZW50dXJpZXMucHVzaChjZW50dXJ5QnlZZWFyW2NlbnR1cnldLmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHllYXJPZmhhbGZDZW50dXJpZXMgPSBbXTtcbiAgICAgICAgICAgIHZhciBudW1iZXJPZkhhbGZDZW50dXJpZXMgPSBbXTtcblxuICAgICAgICAgICAgZm9yICh2YXIgaGFsZkNlbnR1cnkgaW4gaGFsZkNlbnR1cnlCeVllYXIpIHtcbiAgICAgICAgICAgICAgICBpZiAoaGFsZkNlbnR1cnlCeVllYXIuaGFzT3duUHJvcGVydHkoaGFsZkNlbnR1cnkpKSB7XG4gICAgICAgICAgICAgICAgICAgIHllYXJPZmhhbGZDZW50dXJpZXMucHVzaChoYWxmQ2VudHVyeSk7XG4gICAgICAgICAgICAgICAgICAgIG51bWJlck9mSGFsZkNlbnR1cmllcy5wdXNoKGhhbGZDZW50dXJ5QnlZZWFyW2hhbGZDZW50dXJ5XS5sZW5ndGgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIE5vdyBzaW5jZSB0aGVyZSBjYW4gYmUgeWVhcnMgd2hlbiBoZSBzY29yZWQgYSBjZW50dXJ5IGFuZCBkaWQgbm90IHNjb3JlIGEgaGFsZiBjZW50dXJ5IGFuZCB2aWNlIHZlcnNhXG4gICAgICAgICAgICAvLyBXZSBuZWVkIHRvIGZpbmQgeWVhcnMgZm9yIGJvdGggc2VwZXJhdGVseSBhbmQgdGFrZSBhIHVuaW9uIG9mIHRoZW1cblxuICAgICAgICAgICAgdmFyIHllYXJXaXRoTm9IYWxmQ2VudHVyeSA9IF8uZmlsdGVyKHllYXJPZmNlbnR1cmllcywgZnVuY3Rpb24oZWwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geWVhck9maGFsZkNlbnR1cmllcy5pbmRleE9mKGVsKSA8IDA7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHZhciB5ZWFyV2l0aE5vQ2VudHVyeSA9IF8uZmlsdGVyKHllYXJPZmhhbGZDZW50dXJpZXMsIGZ1bmN0aW9uKGVsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHllYXJPZmNlbnR1cmllcy5pbmRleE9mKGVsKSA8IDA7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gVGFraW5nIHVuaW9uIG9mIGJvdGggeWVhcnMgb2YgY2VudHVyaWVzIGFuZCBoYWxmIGNlbnR1cmllcywgQ0xFQU4gSVQgVVAgTEFURVJcbiAgICAgICAgICAgIHZhciBhbGxZZWFyc0ZvckRhdGEgPSBfLnVuaW9uKHllYXJPZmNlbnR1cmllcywgeWVhck9maGFsZkNlbnR1cmllcykuc29ydCgpO1xuICAgICAgICAgICAgdmFyIGluZGV4T2ZOb0hhbGZjZW50dXJ5ID0geWVhcldpdGhOb0hhbGZDZW50dXJ5Lm1hcChmdW5jdGlvbihyZXMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYWxsWWVhcnNGb3JEYXRhLmluZGV4T2YocmVzKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdmFyIGluZGV4T2ZOb0NlbnR1cnkgPSB5ZWFyV2l0aE5vQ2VudHVyeS5tYXAoZnVuY3Rpb24ocmVzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFsbFllYXJzRm9yRGF0YS5pbmRleE9mKHJlcyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIC8vIEFkZCBpbnNlcnQgbWV0aG9kIGFkZCBwcm90b3R5cGUgbGV2ZWwgbGF0ZXIgaWYgdGhpcyB0eXBlIG9mIGZ1bmN0aW9uYWxpdHkgaXMgcmVxdWlyZWQgZnJlcXVlbnRseVxuICAgICAgICAgICAgLy8gU2luY2Ugd2UgaGF2ZSB0aGUgeWVhcnMgd2l0aG91dCBjZW50dXJ5IGFuZCB3aXRob3V0IGhhbGYgY2VudHVyeSB3ZSBjYW4gYWRkIDAgaW4gdGhlaXIgcmVzcGVjdGl2ZSBhcnJheXNcbiAgICAgICAgICAgIC8vIGZvciB0aG9zZSB5ZWFyc1xuICAgICAgICAgICAgaW5kZXhPZk5vQ2VudHVyeS5tYXAoZnVuY3Rpb24ocmVzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlck9mQ2VudHVyaWVzLnNwbGljZShyZXMsIDAsIDApO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpbmRleE9mTm9IYWxmY2VudHVyeS5tYXAoZnVuY3Rpb24ocmVzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlck9mSGFsZkNlbnR1cmllcy5zcGxpY2UocmVzLCAwLCAwKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgJHNjb3BlLmxpbmVEYXRhID0ge1xuICAgICAgICAgICAgICAgIGxhYmVsczogYWxsWWVhcnNGb3JEYXRhLFxuICAgICAgICAgICAgICAgIGRhdGFzZXRzOiBbe1xuICAgICAgICAgICAgICAgICAgICBsYWJlbDogJ0hhbGYgQ2VudHVyaWVzIG92ZXIgdGhlIHllYXJzJyxcbiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiBbJ3JnYmEoMCwxMzIsMjU1LDAuNCknXSxcbiAgICAgICAgICAgICAgICAgICAgc3Ryb2tlQ29sb3I6ICdyZ2JhKDAsMTMyLDI1NSwwLjQpJyxcbiAgICAgICAgICAgICAgICAgICAgcG9pbnRDb2xvcjogJ3JnYmEoMCwxMzIsMjU1LDAuNCknLFxuICAgICAgICAgICAgICAgICAgICBwb2ludFN0cm9rZUNvbG9yOiAnI2ZmZicsXG4gICAgICAgICAgICAgICAgICAgIHBvaW50SGlnaGxpZ2h0RmlsbDogJyNmZmYnLFxuICAgICAgICAgICAgICAgICAgICBwb2ludEhpZ2hsaWdodFN0cm9rZTogJ3JnYmEoMjIwLDIyMCwyMjAsMSknLFxuICAgICAgICAgICAgICAgICAgICBkYXRhOiBudW1iZXJPZkhhbGZDZW50dXJpZXNcbiAgICAgICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgICAgIGxhYmVsOiAnQ2VudHVyaWVzJyxcbiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiBbJ3JnYmEoMjIwLDIyMCwyMjAsMC42KSddLFxuICAgICAgICAgICAgICAgICAgICBzdHJva2VDb2xvcjogJ3JnYmEoMjIwLDIyMCwyMjAsMC42KScsXG4gICAgICAgICAgICAgICAgICAgIHBvaW50Q29sb3I6ICdyZ2JhKDIyMCwyMjAsMjIwLDAuNiknLFxuICAgICAgICAgICAgICAgICAgICBwb2ludFN0cm9rZUNvbG9yOiAnI2ZmZicsXG4gICAgICAgICAgICAgICAgICAgIHBvaW50SGlnaGxpZ2h0RmlsbDogJyNmZmYnLFxuICAgICAgICAgICAgICAgICAgICBwb2ludEhpZ2hsaWdodFN0cm9rZTogJ3JnYmEoMjIwLDIyMCwyMjAsMSknLFxuICAgICAgICAgICAgICAgICAgICBkYXRhOiBudW1iZXJPZkNlbnR1cmllc1xuICAgICAgICAgICAgICAgIH1dXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvLyBDaGFydC5qcyBPcHRpb25zXG4gICAgICAgICAgICAkc2NvcGUubGluZU9wdGlvbnMgPSB7XG5cbiAgICAgICAgICAgICAgICAvLyBTZXRzIHRoZSBjaGFydCB0byBiZSByZXNwb25zaXZlXG4gICAgICAgICAgICAgICAgcmVzcG9uc2l2ZTogdHJ1ZSxcblxuICAgICAgICAgICAgICAgIC8vL0Jvb2xlYW4gLSBXaGV0aGVyIGdyaWQgbGluZXMgYXJlIHNob3duIGFjcm9zcyB0aGUgY2hhcnRcbiAgICAgICAgICAgICAgICBzY2FsZVNob3dHcmlkTGluZXM6IHRydWUsXG5cbiAgICAgICAgICAgICAgICAvL1N0cmluZyAtIENvbG91ciBvZiB0aGUgZ3JpZCBsaW5lc1xuICAgICAgICAgICAgICAgIHNjYWxlR3JpZExpbmVDb2xvcjogXCJyZ2JhKDAsMCwwLC4wNSlcIixcblxuICAgICAgICAgICAgICAgIC8vTnVtYmVyIC0gV2lkdGggb2YgdGhlIGdyaWQgbGluZXNcbiAgICAgICAgICAgICAgICBzY2FsZUdyaWRMaW5lV2lkdGg6IDEsXG5cbiAgICAgICAgICAgICAgICAvL0Jvb2xlYW4gLSBXaGV0aGVyIHRoZSBsaW5lIGlzIGN1cnZlZCBiZXR3ZWVuIHBvaW50c1xuICAgICAgICAgICAgICAgIGJlemllckN1cnZlOiB0cnVlLFxuXG4gICAgICAgICAgICAgICAgLy9OdW1iZXIgLSBUZW5zaW9uIG9mIHRoZSBiZXppZXIgY3VydmUgYmV0d2VlbiBwb2ludHNcbiAgICAgICAgICAgICAgICBiZXppZXJDdXJ2ZVRlbnNpb246IDAuNCxcblxuICAgICAgICAgICAgICAgIC8vQm9vbGVhbiAtIFdoZXRoZXIgdG8gc2hvdyBhIGRvdCBmb3IgZWFjaCBwb2ludFxuICAgICAgICAgICAgICAgIHBvaW50RG90OiB0cnVlLFxuXG4gICAgICAgICAgICAgICAgLy9OdW1iZXIgLSBSYWRpdXMgb2YgZWFjaCBwb2ludCBkb3QgaW4gcGl4ZWxzXG4gICAgICAgICAgICAgICAgcG9pbnREb3RSYWRpdXM6IDQsXG5cbiAgICAgICAgICAgICAgICAvL051bWJlciAtIFBpeGVsIHdpZHRoIG9mIHBvaW50IGRvdCBzdHJva2VcbiAgICAgICAgICAgICAgICBwb2ludERvdFN0cm9rZVdpZHRoOiAxLFxuXG4gICAgICAgICAgICAgICAgLy9OdW1iZXIgLSBhbW91bnQgZXh0cmEgdG8gYWRkIHRvIHRoZSByYWRpdXMgdG8gY2F0ZXIgZm9yIGhpdCBkZXRlY3Rpb24gb3V0c2lkZSB0aGUgZHJhd24gcG9pbnRcbiAgICAgICAgICAgICAgICBwb2ludEhpdERldGVjdGlvblJhZGl1czogMjAsXG5cbiAgICAgICAgICAgICAgICAvL0Jvb2xlYW4gLSBXaGV0aGVyIHRvIHNob3cgYSBzdHJva2UgZm9yIGRhdGFzZXRzXG4gICAgICAgICAgICAgICAgZGF0YXNldFN0cm9rZTogdHJ1ZSxcblxuICAgICAgICAgICAgICAgIC8vTnVtYmVyIC0gUGl4ZWwgd2lkdGggb2YgZGF0YXNldCBzdHJva2VcbiAgICAgICAgICAgICAgICBkYXRhc2V0U3Ryb2tlV2lkdGg6IDIsXG5cbiAgICAgICAgICAgICAgICAvL0Jvb2xlYW4gLSBXaGV0aGVyIHRvIGZpbGwgdGhlIGRhdGFzZXQgd2l0aCBhIGNvbG91clxuICAgICAgICAgICAgICAgIGRhdGFzZXRGaWxsOiB0cnVlLFxuXG4gICAgICAgICAgICAgICAgLy8gRnVuY3Rpb24gLSBvbiBhbmltYXRpb24gcHJvZ3Jlc3NcbiAgICAgICAgICAgICAgICBvbkFuaW1hdGlvblByb2dyZXNzOiBmdW5jdGlvbigpIHt9LFxuXG4gICAgICAgICAgICAgICAgLy8gRnVuY3Rpb24gLSBvbiBhbmltYXRpb24gY29tcGxldGVcbiAgICAgICAgICAgICAgICBvbkFuaW1hdGlvbkNvbXBsZXRlOiBmdW5jdGlvbigpIHt9XG5cbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG4gICAgICAgICRzY29wZS5wcmVwYXJlRG91Z2hudXRDaGFydCA9IGZ1bmN0aW9uKHdvbiwgbG9zdCwgdGllZCwgbm9yZXN1bHQpIHtcbiAgICAgICAgICAgICRzY29wZS5yZXNvdXJjZXMgPSBbe1xuICAgICAgICAgICAgICAgIHZhbHVlOiB3b24sXG4gICAgICAgICAgICAgICAgY29sb3I6ICcjRkZGRjAwJyxcbiAgICAgICAgICAgICAgICBoaWdobGlnaHQ6ICcjZTVlNTAwJyxcbiAgICAgICAgICAgICAgICBsYWJlbDogJ0luZGlhIFdvbidcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogbG9zdCxcbiAgICAgICAgICAgICAgICBjb2xvcjogJyM0NkJGQkQnLFxuICAgICAgICAgICAgICAgIGhpZ2hsaWdodDogJyM1QUQzRDEnLFxuICAgICAgICAgICAgICAgIGxhYmVsOiAnSW5kaWEgTG9zdCdcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogdGllZCxcbiAgICAgICAgICAgICAgICBjb2xvcjogJyNGNzQ2NEEnLFxuICAgICAgICAgICAgICAgIGhpZ2hsaWdodDogJyNGRjVBNUUnLFxuICAgICAgICAgICAgICAgIGxhYmVsOiAnTWF0Y2ggVGllZCdcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogbm9yZXN1bHQsXG4gICAgICAgICAgICAgICAgY29sb3I6ICcjRjc0NjRBJyxcbiAgICAgICAgICAgICAgICBoaWdobGlnaHQ6ICcjRUY1QTVFJyxcbiAgICAgICAgICAgICAgICBsYWJlbDogJ05vIFJlc3VsdCdcbiAgICAgICAgICAgIH1dO1xuXG4gICAgICAgICAgICAvLyBDaGFydC5qcyBPcHRpb25zXG4gICAgICAgICAgICAkc2NvcGUub3B0aW9ucyA9IHtcblxuICAgICAgICAgICAgICAgIC8vIFNldHMgdGhlIGNoYXJ0IHRvIGJlIHJlc3BvbnNpdmVcbiAgICAgICAgICAgICAgICByZXNwb25zaXZlOiB0cnVlLFxuXG4gICAgICAgICAgICAgICAgLy9Cb29sZWFuIC0gV2hldGhlciB3ZSBzaG91bGQgc2hvdyBhIHN0cm9rZSBvbiBlYWNoIHNlZ21lbnRcbiAgICAgICAgICAgICAgICBzZWdtZW50U2hvd1N0cm9rZTogdHJ1ZSxcblxuICAgICAgICAgICAgICAgIC8vU3RyaW5nIC0gVGhlIGNvbG91ciBvZiBlYWNoIHNlZ21lbnQgc3Ryb2tlXG4gICAgICAgICAgICAgICAgc2VnbWVudFN0cm9rZUNvbG9yOiAnI2ZmZicsXG5cbiAgICAgICAgICAgICAgICAvL051bWJlciAtIFRoZSB3aWR0aCBvZiBlYWNoIHNlZ21lbnQgc3Ryb2tlXG4gICAgICAgICAgICAgICAgc2VnbWVudFN0cm9rZVdpZHRoOiAyLFxuXG4gICAgICAgICAgICAgICAgLy9OdW1iZXIgLSBUaGUgcGVyY2VudGFnZSBvZiB0aGUgY2hhcnQgdGhhdCB3ZSBjdXQgb3V0IG9mIHRoZSBtaWRkbGVcbiAgICAgICAgICAgICAgICBwZXJjZW50YWdlSW5uZXJDdXRvdXQ6IDUwLCAvLyBUaGlzIGlzIDAgZm9yIFBpZSBjaGFydHNcblxuICAgICAgICAgICAgICAgIC8vTnVtYmVyIC0gQW1vdW50IG9mIGFuaW1hdGlvbiBzdGVwc1xuICAgICAgICAgICAgICAgIGFuaW1hdGlvblN0ZXBzOiAxMDAsXG5cbiAgICAgICAgICAgICAgICAvL1N0cmluZyAtIEFuaW1hdGlvbiBlYXNpbmcgZWZmZWN0XG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uRWFzaW5nOiAnZWFzZU91dEJvdW5jZScsXG5cbiAgICAgICAgICAgICAgICAvL0Jvb2xlYW4gLSBXaGV0aGVyIHdlIGFuaW1hdGUgdGhlIHJvdGF0aW9uIG9mIHRoZSBEb3VnaG51dFxuICAgICAgICAgICAgICAgIGFuaW1hdGVSb3RhdGU6IHRydWUsXG5cbiAgICAgICAgICAgICAgICAvL0Jvb2xlYW4gLSBXaGV0aGVyIHdlIGFuaW1hdGUgc2NhbGluZyB0aGUgRG91Z2hudXQgZnJvbSB0aGUgY2VudHJlXG4gICAgICAgICAgICAgICAgYW5pbWF0ZVNjYWxlOiBmYWxzZSxcblxuICAgICAgICAgICAgfTtcblxuICAgICAgICB9O1xuXG4gICAgICAgICRzY29wZS5wcmVwYXJlQ29udmVyc2lvblJhdGVQaWVDaGFydCA9IGZ1bmN0aW9uKGZpZnR5LCBodW5kcmVkKSB7XG4gICAgICAgICAgICAkc2NvcGUuY29udmVyc2lvbkRhdGEgPSBbe1xuICAgICAgICAgICAgICAgIHZhbHVlOiBmaWZ0eSxcbiAgICAgICAgICAgICAgICBjb2xvcjogJyNGNzQ2NEEnLFxuICAgICAgICAgICAgICAgIGhpZ2hsaWdodDogJyNGRjVBNUUnLFxuICAgICAgICAgICAgICAgIGxhYmVsOiAnSGFsZiBDZW50dXJpZXMnXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IGh1bmRyZWQsXG4gICAgICAgICAgICAgICAgY29sb3I6ICcjRkRCNDVDJyxcbiAgICAgICAgICAgICAgICBoaWdobGlnaHQ6ICcjRkZDODcwJyxcbiAgICAgICAgICAgICAgICBsYWJlbDogJ0NlbnR1cmllcydcbiAgICAgICAgICAgIH1dO1xuXG4gICAgICAgICAgICAvLyBDaGFydC5qcyBPcHRpb25zXG4gICAgICAgICAgICAkc2NvcGUuY29udmVyc2lvbk9wdGlvbnMgPSB7XG5cbiAgICAgICAgICAgICAgICAvLyBTZXRzIHRoZSBjaGFydCB0byBiZSByZXNwb25zaXZlXG4gICAgICAgICAgICAgICAgcmVzcG9uc2l2ZTogdHJ1ZSxcblxuICAgICAgICAgICAgICAgIC8vQm9vbGVhbiAtIFdoZXRoZXIgd2Ugc2hvdWxkIHNob3cgYSBzdHJva2Ugb24gZWFjaCBzZWdtZW50XG4gICAgICAgICAgICAgICAgc2VnbWVudFNob3dTdHJva2U6IHRydWUsXG5cbiAgICAgICAgICAgICAgICAvL1N0cmluZyAtIFRoZSBjb2xvdXIgb2YgZWFjaCBzZWdtZW50IHN0cm9rZVxuICAgICAgICAgICAgICAgIHNlZ21lbnRTdHJva2VDb2xvcjogJyNmZmYnLFxuXG4gICAgICAgICAgICAgICAgLy9OdW1iZXIgLSBUaGUgd2lkdGggb2YgZWFjaCBzZWdtZW50IHN0cm9rZVxuICAgICAgICAgICAgICAgIHNlZ21lbnRTdHJva2VXaWR0aDogMixcblxuICAgICAgICAgICAgICAgIC8vTnVtYmVyIC0gVGhlIHBlcmNlbnRhZ2Ugb2YgdGhlIGNoYXJ0IHRoYXQgd2UgY3V0IG91dCBvZiB0aGUgbWlkZGxlXG4gICAgICAgICAgICAgICAgcGVyY2VudGFnZUlubmVyQ3V0b3V0OiAwLCAvLyBUaGlzIGlzIDAgZm9yIFBpZSBjaGFydHNcblxuICAgICAgICAgICAgICAgIC8vTnVtYmVyIC0gQW1vdW50IG9mIGFuaW1hdGlvbiBzdGVwc1xuICAgICAgICAgICAgICAgIGFuaW1hdGlvblN0ZXBzOiAxMDAsXG5cbiAgICAgICAgICAgICAgICAvL1N0cmluZyAtIEFuaW1hdGlvbiBlYXNpbmcgZWZmZWN0XG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uRWFzaW5nOiAnZWFzZU91dEJvdW5jZScsXG5cbiAgICAgICAgICAgICAgICAvL0Jvb2xlYW4gLSBXaGV0aGVyIHdlIGFuaW1hdGUgdGhlIHJvdGF0aW9uIG9mIHRoZSBEb3VnaG51dFxuICAgICAgICAgICAgICAgIGFuaW1hdGVSb3RhdGU6IHRydWUsXG5cbiAgICAgICAgICAgICAgICAvL0Jvb2xlYW4gLSBXaGV0aGVyIHdlIGFuaW1hdGUgc2NhbGluZyB0aGUgRG91Z2hudXQgZnJvbSB0aGUgY2VudHJlXG4gICAgICAgICAgICAgICAgYW5pbWF0ZVNjYWxlOiBmYWxzZVxuXG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuICAgIH0pO1xuIiwiLy8gUnVucyBTdGF0cyBjb250cm9sbGVyXG4vLyBUaGlzIGNvbnRyb2xsZXIgaXMgYXR0YWNoZWQgdG8gYSBkaXJlY3RpdmUgLSBydW5zU3RhdHNcbi8vIGFuZCB0aGUgcHVycG9zZSBvZiB0aGlzIGNvbnRyb2xsZXIgaXMgdG8gd29yayBvbiB0aGUgcnVuc1N0YXRzIHBhc3NlZCB0byBpdHMgJHNjb3BlIHZpYSBpdHMgYXR0cmlidXRlXG5hbmd1bGFyLm1vZHVsZSgnYXBwJylcbiAgICAuY29udHJvbGxlcigncnVuc1N0YXRzQ3RybCcsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAvLyBXYXRjaCBmb3IgdGhlICRzY29wZS5jZW50dXJ5U3RhdHMgdmFyaWFibGUgdG8gZ2V0IHRoZSBkYXRhIGZyb20gYXR0cmlidXRlXG4gICAgICAgICRzY29wZS4kd2F0Y2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gJHNjb3BlLnJ1bnNTdGF0cztcbiAgICAgICAgfSwgZnVuY3Rpb24obikge1xuICAgICAgICAgICAgaWYgKCFuKSByZXR1cm47XG4gICAgICAgICAgICAvLyBJZiBpdCBoYXMgcmVjZWl2ZWQgZGF0YSB0aGVuIHN0YXJ0IHdvcmtpbmcgb24gQW5hbHl6aW5nIENlbnR1cmllc1xuICAgICAgICAgICAgJHNjb3BlLmFuYWx5emVJbm5pbmdzKCRzY29wZS5ydW5zU3RhdHMpO1xuICAgICAgICB9KTtcblxuXG4gICAgICAgICRzY29wZS5hbmFseXplSW5uaW5ncyA9IGZ1bmN0aW9uKHJ1bnNTdGF0cykge1xuICAgICAgICAgICAgLy9SdW5zIG92ZXIgdGhlIHllYXJzXG4gICAgICAgICAgICB2YXIgcnVuc0J5WWVhciA9IFtdO1xuICAgICAgICAgICAgdmFyIHJ1bnNBZ2FpbnN0VGVhbXMgPSBbXTtcbiAgICAgICAgICAgIHZhciBmaXJzdElubmluZ3MgPSAwO1xuICAgICAgICAgICAgdmFyIHNlY29uZElubmluZ3MgPSAwO1xuICAgICAgICAgICAgdmFyIHJ1bnNGaXJzdElubmluZ3MgPSAwO1xuICAgICAgICAgICAgdmFyIHJ1bnNTZWNvbmRJbm5pbmdzID0gMDtcbiAgICAgICAgICAgIHJ1bnNTdGF0cy5hbGxJbm5pbmdzLm1hcChmdW5jdGlvbihyZXMpIHtcbiAgICAgICAgICAgICAgICAvL2NhbGN1bGF0ZSBudW1iZXIgb2YgZmlyc3QgaW5uaW5ncyBhbmQgc2Vjb25kIGlubmluZ3MgcGxheWVkIGFuZCBydW4gc2NvcmVkIGluIHRoZW1cbiAgICAgICAgICAgICAgICBpZiAocmVzLmlubmluZ3MgPT0gXCIxc3RcIikge1xuICAgICAgICAgICAgICAgICAgICBmaXJzdElubmluZ3MrKztcbiAgICAgICAgICAgICAgICAgICAgcnVuc0ZpcnN0SW5uaW5ncyArPSByZXMucnVucztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzZWNvbmRJbm5pbmdzKys7XG4gICAgICAgICAgICAgICAgICAgIHJ1bnNTZWNvbmRJbm5pbmdzICs9IHJlcy5ydW5zO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vZ2V0IHJ1bnMgb24geWVhcmx5IGJhc2lzXG4gICAgICAgICAgICAgICAgdmFyIHllYXIgPSByZXMueWVhcjtcbiAgICAgICAgICAgICAgICB2YXIgdGVhbSA9IHJlcy5hZ2FpbnN0O1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YocnVuc0J5WWVhclt5ZWFyXSkgPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgICAgICAgICBydW5zQnlZZWFyW3llYXJdID0gW107XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YocnVuc0J5WWVhclt5ZWFyXSkgPT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgICAgICAgICBydW5zQnlZZWFyW3llYXJdICs9IHBhcnNlSW50KHJlcy5ydW5zKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBydW5zQnlZZWFyW3llYXJdID0gcGFyc2VJbnQocmVzLnJ1bnMpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vZ2V0IHJ1bnMgYWdhaW5zdCB0ZWFtc1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YocnVuc0FnYWluc3RUZWFtc1t0ZWFtXSkgPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgICAgICAgICBydW5zQWdhaW5zdFRlYW1zW3RlYW1dID0gW107XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YocnVuc0FnYWluc3RUZWFtc1t0ZWFtXSkgPT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcnVuc0FnYWluc3RUZWFtc1t0ZWFtXSArPSBwYXJzZUludChyZXMucnVucyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJ1bnNBZ2FpbnN0VGVhbXNbdGVhbV0gPSBwYXJzZUludChyZXMucnVucyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAkc2NvcGUucHJlcGFyZVJ1bnNCeVllYXJHcmFwaChydW5zQnlZZWFyKTtcbiAgICAgICAgICAgICRzY29wZS5wcmVwYXJlUnVuc0J5VGVhbUdyYXBoKHJ1bnNBZ2FpbnN0VGVhbXMpO1xuICAgICAgICAgICAgJHNjb3BlLnByZXBhcmVSdW5zQnlJbm5pbmdzR3JhcGgocnVuc0ZpcnN0SW5uaW5ncywgcnVuc1NlY29uZElubmluZ3MpO1xuICAgICAgICAgICAgJHNjb3BlLnByZXBhcmVBdmVyYWdlQnlJbm5pbmdzR3JhcGgocnVuc0ZpcnN0SW5uaW5ncywgZmlyc3RJbm5pbmdzLCBydW5zU3RhdHMuZmlyc3RJbm5pbmdzTm90b3V0cywgcnVuc1NlY29uZElubmluZ3MsIHNlY29uZElubmluZ3MsIHJ1bnNTdGF0cy5zZWNvbmRJbm5pbmdzTm90b3V0cyk7XG4gICAgICAgIH07XG5cblxuICAgICAgICAkc2NvcGUucHJlcGFyZVJ1bnNCeVllYXJHcmFwaCA9IGZ1bmN0aW9uKHJ1bnNCeVllYXIpIHtcbiAgICAgICAgICAgIHZhciB5ZWFycyA9IFtdO1xuICAgICAgICAgICAgdmFyIHJ1bnMgPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIHllYXIgaW4gcnVuc0J5WWVhcikge1xuICAgICAgICAgICAgICAgIGlmIChydW5zQnlZZWFyLmhhc093blByb3BlcnR5KHllYXIpKSB7XG4gICAgICAgICAgICAgICAgICAgIHllYXJzLnB1c2goeWVhcik7XG4gICAgICAgICAgICAgICAgICAgIHJ1bnMucHVzaChydW5zQnlZZWFyW3llYXJdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgY29sb3JzID0gW107XG4gICAgICAgICAgICBydW5zLm1hcChmdW5jdGlvbihyZXMsIGtleSkge1xuICAgICAgICAgICAgICAgIGlmIChyZXMgPj0gMTAwMCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29sb3JzW2tleV0gPSBcIiNGRkZGMDBcIjtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29sb3JzW2tleV0gPSBcIiMwMDg0RkZcIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgJHNjb3BlLnllYXJCYXJkYXRhID0ge1xuICAgICAgICAgICAgICAgIGxhYmVsczogeWVhcnMsXG4gICAgICAgICAgICAgICAgZGF0YXNldHM6IFt7XG4gICAgICAgICAgICAgICAgICAgIGxhYmVsOiAnUnVucyBPdmVyIHRoZSB5ZWFycycsXG4gICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogY29sb3JzLFxuICAgICAgICAgICAgICAgICAgICBzdHJva2VDb2xvcjogJ3JnYmEoMjIwLDIyMCwyMjAsMSknLFxuICAgICAgICAgICAgICAgICAgICBwb2ludENvbG9yOiAncmdiYSgyMjAsMjIwLDIyMCwxKScsXG4gICAgICAgICAgICAgICAgICAgIHBvaW50U3Ryb2tlQ29sb3I6ICcjZmZmJyxcbiAgICAgICAgICAgICAgICAgICAgcG9pbnRIaWdobGlnaHRGaWxsOiAnI2ZmZicsXG4gICAgICAgICAgICAgICAgICAgIHBvaW50SGlnaGxpZ2h0U3Ryb2tlOiAncmdiYSgyMjAsMjIwLDIyMCwxKScsXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IHJ1bnNcbiAgICAgICAgICAgICAgICB9XVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgLy8gQ2hhcnQuanMgT3B0aW9uc1xuICAgICAgICAgICAgJHNjb3BlLnllYXJCYXJvcHRpb25zID0ge1xuXG4gICAgICAgICAgICAgICAgLy8gU2V0cyB0aGUgY2hhcnQgdG8gYmUgcmVzcG9uc2l2ZVxuICAgICAgICAgICAgICAgIHJlc3BvbnNpdmU6IHRydWUsXG5cbiAgICAgICAgICAgICAgICAvL0Jvb2xlYW4gLSBXaGV0aGVyIHRoZSBzY2FsZSBzaG91bGQgc3RhcnQgYXQgemVybywgb3IgYW4gb3JkZXIgb2YgbWFnbml0dWRlIGRvd24gZnJvbSB0aGUgbG93ZXN0IHZhbHVlXG4gICAgICAgICAgICAgICAgc2NhbGVCZWdpbkF0WmVybzogdHJ1ZSxcblxuICAgICAgICAgICAgICAgIC8vQm9vbGVhbiAtIFdoZXRoZXIgZ3JpZCBsaW5lcyBhcmUgc2hvd24gYWNyb3NzIHRoZSBjaGFydFxuICAgICAgICAgICAgICAgIHNjYWxlU2hvd0dyaWRMaW5lczogdHJ1ZSxcblxuICAgICAgICAgICAgICAgIC8vU3RyaW5nIC0gQ29sb3VyIG9mIHRoZSBncmlkIGxpbmVzXG4gICAgICAgICAgICAgICAgc2NhbGVHcmlkTGluZUNvbG9yOiBcInJnYmEoMCwwLDAsLjA1KVwiLFxuXG4gICAgICAgICAgICAgICAgLy9OdW1iZXIgLSBXaWR0aCBvZiB0aGUgZ3JpZCBsaW5lc1xuICAgICAgICAgICAgICAgIHNjYWxlR3JpZExpbmVXaWR0aDogMSxcblxuICAgICAgICAgICAgICAgIC8vQm9vbGVhbiAtIElmIHRoZXJlIGlzIGEgc3Ryb2tlIG9uIGVhY2ggYmFyXG4gICAgICAgICAgICAgICAgYmFyU2hvd1N0cm9rZTogdHJ1ZSxcblxuICAgICAgICAgICAgICAgIC8vTnVtYmVyIC0gUGl4ZWwgd2lkdGggb2YgdGhlIGJhciBzdHJva2VcbiAgICAgICAgICAgICAgICBiYXJTdHJva2VXaWR0aDogMixcblxuICAgICAgICAgICAgICAgIC8vTnVtYmVyIC0gU3BhY2luZyBiZXR3ZWVuIGVhY2ggb2YgdGhlIFggdmFsdWUgc2V0c1xuICAgICAgICAgICAgICAgIGJhclZhbHVlU3BhY2luZzogNSxcblxuICAgICAgICAgICAgICAgIC8vTnVtYmVyIC0gU3BhY2luZyBiZXR3ZWVuIGRhdGEgc2V0cyB3aXRoaW4gWCB2YWx1ZXNcbiAgICAgICAgICAgICAgICBiYXJEYXRhc2V0U3BhY2luZzogMVxuXG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuICAgICAgICAkc2NvcGUucHJlcGFyZVJ1bnNCeVRlYW1HcmFwaCA9IGZ1bmN0aW9uKHJ1bnNBZ2FpbnN0VGVhbXMpIHtcbiAgICAgICAgICAgIHZhciB0ZWFtcyA9IFtdO1xuICAgICAgICAgICAgdmFyIHJ1bnMgPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIHRlYW0gaW4gcnVuc0FnYWluc3RUZWFtcykge1xuICAgICAgICAgICAgICAgIGlmIChydW5zQWdhaW5zdFRlYW1zLmhhc093blByb3BlcnR5KHRlYW0pKSB7XG4gICAgICAgICAgICAgICAgICAgIHRlYW1zLnB1c2godGVhbSk7XG4gICAgICAgICAgICAgICAgICAgIHJ1bnMucHVzaChydW5zQWdhaW5zdFRlYW1zW3RlYW1dKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAkc2NvcGUudGVhbUJhcmRhdGEgPSB7XG4gICAgICAgICAgICAgICAgbGFiZWxzOiB0ZWFtcyxcbiAgICAgICAgICAgICAgICBkYXRhc2V0czogW3tcbiAgICAgICAgICAgICAgICAgICAgbGFiZWw6ICdSdW5zIE92ZXIgdGhlIHllYXJzJyxcbiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiBbJyMwMDg0RkYnXSxcbiAgICAgICAgICAgICAgICAgICAgc3Ryb2tlQ29sb3I6ICdyZ2JhKDIyMCwyMjAsMjIwLDEpJyxcbiAgICAgICAgICAgICAgICAgICAgcG9pbnRDb2xvcjogJ3JnYmEoMjIwLDIyMCwyMjAsMSknLFxuICAgICAgICAgICAgICAgICAgICBwb2ludFN0cm9rZUNvbG9yOiAnI2ZmZicsXG4gICAgICAgICAgICAgICAgICAgIHBvaW50SGlnaGxpZ2h0RmlsbDogJyNmZmYnLFxuICAgICAgICAgICAgICAgICAgICBwb2ludEhpZ2hsaWdodFN0cm9rZTogJ3JnYmEoMjIwLDIyMCwyMjAsMSknLFxuICAgICAgICAgICAgICAgICAgICBkYXRhOiBydW5zXG4gICAgICAgICAgICAgICAgfV1cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIC8vIENoYXJ0LmpzIE9wdGlvbnNcbiAgICAgICAgICAgICRzY29wZS50ZWFtQmFyb3B0aW9ucyA9IHtcblxuICAgICAgICAgICAgICAgIC8vIFNldHMgdGhlIGNoYXJ0IHRvIGJlIHJlc3BvbnNpdmVcbiAgICAgICAgICAgICAgICByZXNwb25zaXZlOiB0cnVlLFxuXG4gICAgICAgICAgICAgICAgLy9Cb29sZWFuIC0gV2hldGhlciB0aGUgc2NhbGUgc2hvdWxkIHN0YXJ0IGF0IHplcm8sIG9yIGFuIG9yZGVyIG9mIG1hZ25pdHVkZSBkb3duIGZyb20gdGhlIGxvd2VzdCB2YWx1ZVxuICAgICAgICAgICAgICAgIHNjYWxlQmVnaW5BdFplcm86IHRydWUsXG5cbiAgICAgICAgICAgICAgICAvL0Jvb2xlYW4gLSBXaGV0aGVyIGdyaWQgbGluZXMgYXJlIHNob3duIGFjcm9zcyB0aGUgY2hhcnRcbiAgICAgICAgICAgICAgICBzY2FsZVNob3dHcmlkTGluZXM6IHRydWUsXG5cbiAgICAgICAgICAgICAgICAvL1N0cmluZyAtIENvbG91ciBvZiB0aGUgZ3JpZCBsaW5lc1xuICAgICAgICAgICAgICAgIHNjYWxlR3JpZExpbmVDb2xvcjogXCJyZ2JhKDAsMCwwLC4wNSlcIixcblxuICAgICAgICAgICAgICAgIC8vTnVtYmVyIC0gV2lkdGggb2YgdGhlIGdyaWQgbGluZXNcbiAgICAgICAgICAgICAgICBzY2FsZUdyaWRMaW5lV2lkdGg6IDEsXG5cbiAgICAgICAgICAgICAgICAvL0Jvb2xlYW4gLSBJZiB0aGVyZSBpcyBhIHN0cm9rZSBvbiBlYWNoIGJhclxuICAgICAgICAgICAgICAgIGJhclNob3dTdHJva2U6IHRydWUsXG5cbiAgICAgICAgICAgICAgICAvL051bWJlciAtIFBpeGVsIHdpZHRoIG9mIHRoZSBiYXIgc3Ryb2tlXG4gICAgICAgICAgICAgICAgYmFyU3Ryb2tlV2lkdGg6IDIsXG5cbiAgICAgICAgICAgICAgICAvL051bWJlciAtIFNwYWNpbmcgYmV0d2VlbiBlYWNoIG9mIHRoZSBYIHZhbHVlIHNldHNcbiAgICAgICAgICAgICAgICBiYXJWYWx1ZVNwYWNpbmc6IDUsXG5cbiAgICAgICAgICAgICAgICAvL051bWJlciAtIFNwYWNpbmcgYmV0d2VlbiBkYXRhIHNldHMgd2l0aGluIFggdmFsdWVzXG4gICAgICAgICAgICAgICAgYmFyRGF0YXNldFNwYWNpbmc6IDFcbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG4gICAgICAgICRzY29wZS5wcmVwYXJlUnVuc0J5SW5uaW5nc0dyYXBoID0gZnVuY3Rpb24oZmlyc3RJbm5pbmdzLCBzZWNvbmRJbm5pbmdzKSB7XG4gICAgICAgICAgICAkc2NvcGUuaW5uaW5pbmdzUnVuc3Jlc291cmNlcyA9IFt7XG4gICAgICAgICAgICAgICAgdmFsdWU6IGZpcnN0SW5uaW5ncyxcbiAgICAgICAgICAgICAgICBjb2xvcjogJyNGRkZGMDAnLFxuICAgICAgICAgICAgICAgIGhpZ2hsaWdodDogJyNlNWU1MDAnLFxuICAgICAgICAgICAgICAgIGxhYmVsOiAnRmlyc3QgSW5uaW5ncydcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogc2Vjb25kSW5uaW5ncyxcbiAgICAgICAgICAgICAgICBjb2xvcjogJyM0NkJGQkQnLFxuICAgICAgICAgICAgICAgIGhpZ2hsaWdodDogJyM1QUQzRDEnLFxuICAgICAgICAgICAgICAgIGxhYmVsOiAnU2Vjb25kIElubmluZ3MnXG4gICAgICAgICAgICB9XTtcblxuICAgICAgICAgICAgLy8gQ2hhcnQuanMgT3B0aW9uc1xuICAgICAgICAgICAgJHNjb3BlLmlubmluaW5nc1J1bnNvcHRpb25zID0ge1xuXG4gICAgICAgICAgICAgICAgLy8gU2V0cyB0aGUgY2hhcnQgdG8gYmUgcmVzcG9uc2l2ZVxuICAgICAgICAgICAgICAgIHJlc3BvbnNpdmU6IHRydWUsXG5cbiAgICAgICAgICAgICAgICAvL0Jvb2xlYW4gLSBXaGV0aGVyIHdlIHNob3VsZCBzaG93IGEgc3Ryb2tlIG9uIGVhY2ggc2VnbWVudFxuICAgICAgICAgICAgICAgIHNlZ21lbnRTaG93U3Ryb2tlOiB0cnVlLFxuXG4gICAgICAgICAgICAgICAgLy9TdHJpbmcgLSBUaGUgY29sb3VyIG9mIGVhY2ggc2VnbWVudCBzdHJva2VcbiAgICAgICAgICAgICAgICBzZWdtZW50U3Ryb2tlQ29sb3I6ICcjZmZmJyxcblxuICAgICAgICAgICAgICAgIC8vTnVtYmVyIC0gVGhlIHdpZHRoIG9mIGVhY2ggc2VnbWVudCBzdHJva2VcbiAgICAgICAgICAgICAgICBzZWdtZW50U3Ryb2tlV2lkdGg6IDIsXG5cbiAgICAgICAgICAgICAgICAvL051bWJlciAtIFRoZSBwZXJjZW50YWdlIG9mIHRoZSBjaGFydCB0aGF0IHdlIGN1dCBvdXQgb2YgdGhlIG1pZGRsZVxuICAgICAgICAgICAgICAgIHBlcmNlbnRhZ2VJbm5lckN1dG91dDogNTAsIC8vIFRoaXMgaXMgMCBmb3IgUGllIGNoYXJ0c1xuXG4gICAgICAgICAgICAgICAgLy9OdW1iZXIgLSBBbW91bnQgb2YgYW5pbWF0aW9uIHN0ZXBzXG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uU3RlcHM6IDEwMCxcblxuICAgICAgICAgICAgICAgIC8vU3RyaW5nIC0gQW5pbWF0aW9uIGVhc2luZyBlZmZlY3RcbiAgICAgICAgICAgICAgICBhbmltYXRpb25FYXNpbmc6ICdlYXNlT3V0Qm91bmNlJyxcblxuICAgICAgICAgICAgICAgIC8vQm9vbGVhbiAtIFdoZXRoZXIgd2UgYW5pbWF0ZSB0aGUgcm90YXRpb24gb2YgdGhlIERvdWdobnV0XG4gICAgICAgICAgICAgICAgYW5pbWF0ZVJvdGF0ZTogdHJ1ZSxcblxuICAgICAgICAgICAgICAgIC8vQm9vbGVhbiAtIFdoZXRoZXIgd2UgYW5pbWF0ZSBzY2FsaW5nIHRoZSBEb3VnaG51dCBmcm9tIHRoZSBjZW50cmVcbiAgICAgICAgICAgICAgICBhbmltYXRlU2NhbGU6IGZhbHNlXG5cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgfTtcblxuICAgICAgICAkc2NvcGUucHJlcGFyZUF2ZXJhZ2VCeUlubmluZ3NHcmFwaCA9IGZ1bmN0aW9uKHJ1bnNGaXJzdElubmluZ3MsIGZpcnN0SW5uaW5ncywgZmlyc3RJbm5pbmdzTm90b3V0cywgcnVuc1NlY29uZElubmluZ3MsIHNlY29uZElubmluZ3MsIHNlY29uZElubmluZ3NOb3RvdXRzKSB7XG4gICAgICAgICAgICB2YXIgZmlyc3RJbm5pbmdzQXZlcmFnZSA9IHJ1bnNGaXJzdElubmluZ3MgLyAoZmlyc3RJbm5pbmdzIC0gZmlyc3RJbm5pbmdzTm90b3V0cyk7XG4gICAgICAgICAgICB2YXIgc2Vjb25kSW5uaW5nc0F2ZXJhZ2UgPSBydW5zU2Vjb25kSW5uaW5ncyAvIChzZWNvbmRJbm5pbmdzIC0gc2Vjb25kSW5uaW5nc05vdG91dHMpO1xuXG4gICAgICAgICAgICAkc2NvcGUuYXZlcmFnZURhdGEgPSBbe1xuICAgICAgICAgICAgICAgIHZhbHVlOiBmaXJzdElubmluZ3NBdmVyYWdlLnRvRml4ZWQoMiksXG4gICAgICAgICAgICAgICAgY29sb3I6ICcjRjc0NjRBJyxcbiAgICAgICAgICAgICAgICBoaWdobGlnaHQ6ICcjRkY1QTVFJyxcbiAgICAgICAgICAgICAgICBsYWJlbDogJ0F2ZXJhZ2UgaW4gRmlyc3QgSW5uaW5ncydcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogc2Vjb25kSW5uaW5nc0F2ZXJhZ2UudG9GaXhlZCgyKSxcbiAgICAgICAgICAgICAgICBjb2xvcjogJyNGREI0NUMnLFxuICAgICAgICAgICAgICAgIGhpZ2hsaWdodDogJyNGRkM4NzAnLFxuICAgICAgICAgICAgICAgIGxhYmVsOiAnQXZlcmFnZSBpbiBTZWNvbmQgSW5uaW5ncydcbiAgICAgICAgICAgIH1dO1xuXG4gICAgICAgICAgICAvLyBDaGFydC5qcyBPcHRpb25zXG4gICAgICAgICAgICAkc2NvcGUuYXZlcmFnZU9wdGlvbnMgPSB7XG5cbiAgICAgICAgICAgICAgICAvLyBTZXRzIHRoZSBjaGFydCB0byBiZSByZXNwb25zaXZlXG4gICAgICAgICAgICAgICAgcmVzcG9uc2l2ZTogdHJ1ZSxcblxuICAgICAgICAgICAgICAgIC8vQm9vbGVhbiAtIFdoZXRoZXIgd2Ugc2hvdWxkIHNob3cgYSBzdHJva2Ugb24gZWFjaCBzZWdtZW50XG4gICAgICAgICAgICAgICAgc2VnbWVudFNob3dTdHJva2U6IHRydWUsXG5cbiAgICAgICAgICAgICAgICAvL1N0cmluZyAtIFRoZSBjb2xvdXIgb2YgZWFjaCBzZWdtZW50IHN0cm9rZVxuICAgICAgICAgICAgICAgIHNlZ21lbnRTdHJva2VDb2xvcjogJyNmZmYnLFxuXG4gICAgICAgICAgICAgICAgLy9OdW1iZXIgLSBUaGUgd2lkdGggb2YgZWFjaCBzZWdtZW50IHN0cm9rZVxuICAgICAgICAgICAgICAgIHNlZ21lbnRTdHJva2VXaWR0aDogMixcblxuICAgICAgICAgICAgICAgIC8vTnVtYmVyIC0gVGhlIHBlcmNlbnRhZ2Ugb2YgdGhlIGNoYXJ0IHRoYXQgd2UgY3V0IG91dCBvZiB0aGUgbWlkZGxlXG4gICAgICAgICAgICAgICAgcGVyY2VudGFnZUlubmVyQ3V0b3V0OiAwLCAvLyBUaGlzIGlzIDAgZm9yIFBpZSBjaGFydHNcblxuICAgICAgICAgICAgICAgIC8vTnVtYmVyIC0gQW1vdW50IG9mIGFuaW1hdGlvbiBzdGVwc1xuICAgICAgICAgICAgICAgIGFuaW1hdGlvblN0ZXBzOiAxMDAsXG5cbiAgICAgICAgICAgICAgICAvL1N0cmluZyAtIEFuaW1hdGlvbiBlYXNpbmcgZWZmZWN0XG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uRWFzaW5nOiAnZWFzZU91dEJvdW5jZScsXG5cbiAgICAgICAgICAgICAgICAvL0Jvb2xlYW4gLSBXaGV0aGVyIHdlIGFuaW1hdGUgdGhlIHJvdGF0aW9uIG9mIHRoZSBEb3VnaG51dFxuICAgICAgICAgICAgICAgIGFuaW1hdGVSb3RhdGU6IHRydWUsXG5cbiAgICAgICAgICAgICAgICAvL0Jvb2xlYW4gLSBXaGV0aGVyIHdlIGFuaW1hdGUgc2NhbGluZyB0aGUgRG91Z2hudXQgZnJvbSB0aGUgY2VudHJlXG4gICAgICAgICAgICAgICAgYW5pbWF0ZVNjYWxlOiBmYWxzZVxuXG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuICAgIH0pO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
